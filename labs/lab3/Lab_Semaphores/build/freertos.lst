ARM GAS  /tmp/ccGBb0Zx.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC0:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.StartDefaultTask,"ax",%progbits
  22              		.align	1
  23              		.global	StartDefaultTask
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	StartDefaultTask:
  31              	.LFB137:
  32              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
ARM GAS  /tmp/ccGBb0Zx.s 			page 2


  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* USER CODE END PTD */
  35:Core/Src/freertos.c **** 
  36:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* USER CODE END PD */
  40:Core/Src/freertos.c **** 
  41:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* USER CODE END PM */
  45:Core/Src/freertos.c **** 
  46:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* USER CODE END Variables */
  50:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  51:Core/Src/freertos.c **** 
  52:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  56:Core/Src/freertos.c **** 
  57:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  62:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  65:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  66:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  67:Core/Src/freertos.c **** 
  68:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  69:Core/Src/freertos.c **** {
  70:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  71:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  72:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  73:Core/Src/freertos.c ****   /* place for user code */
  74:Core/Src/freertos.c **** }
  75:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  76:Core/Src/freertos.c **** 
  77:Core/Src/freertos.c **** /**
  78:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  79:Core/Src/freertos.c ****   * @param  None
  80:Core/Src/freertos.c ****   * @retval None
  81:Core/Src/freertos.c ****   */
ARM GAS  /tmp/ccGBb0Zx.s 			page 3


  82:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  83:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  84:Core/Src/freertos.c **** 
  85:Core/Src/freertos.c ****   /* USER CODE END Init */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  88:Core/Src/freertos.c ****   /* add mutexes, ... */
  89:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  90:Core/Src/freertos.c **** 
  91:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  92:Core/Src/freertos.c ****   /* add semaphores, ... */
  93:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
  94:Core/Src/freertos.c **** 
  95:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
  96:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
  97:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
  98:Core/Src/freertos.c **** 
  99:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 100:Core/Src/freertos.c ****   /* add queues, ... */
 101:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 102:Core/Src/freertos.c **** 
 103:Core/Src/freertos.c ****   /* Create the thread(s) */
 104:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 105:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 106:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 107:Core/Src/freertos.c **** 
 108:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 109:Core/Src/freertos.c ****   /* add threads, ... */
 110:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 111:Core/Src/freertos.c **** 
 112:Core/Src/freertos.c **** }
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 115:Core/Src/freertos.c **** /**
 116:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 117:Core/Src/freertos.c ****   * @param  argument: Not used
 118:Core/Src/freertos.c ****   * @retval None
 119:Core/Src/freertos.c ****   */
 120:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 121:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 122:Core/Src/freertos.c **** {
  33              		.loc 1 122 1 view -0
  34              		.cfi_startproc
  35              		@ Volatile: function does not return.
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              	.LVL0:
  39              		.loc 1 122 1 is_stmt 0 view .LVU1
  40 0000 08B5     		push	{r3, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 3, -8
  44              		.cfi_offset 14, -4
  45              	.LVL1:
  46              	.L2:
 123:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 124:Core/Src/freertos.c ****   /* Infinite loop */
ARM GAS  /tmp/ccGBb0Zx.s 			page 4


 125:Core/Src/freertos.c ****   for(;;)
  47              		.loc 1 125 3 is_stmt 1 discriminator 1 view .LVU2
 126:Core/Src/freertos.c ****   {
 127:Core/Src/freertos.c ****     osDelay(1);
  48              		.loc 1 127 5 discriminator 1 view .LVU3
  49 0002 0120     		movs	r0, #1
  50 0004 FFF7FEFF 		bl	osDelay
  51              	.LVL2:
 125:Core/Src/freertos.c ****   {
  52              		.loc 1 125 8 discriminator 1 view .LVU4
  53 0008 FBE7     		b	.L2
  54              		.cfi_endproc
  55              	.LFE137:
  57              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  58              		.align	1
  59              		.global	vApplicationGetIdleTaskMemory
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv4-sp-d16
  65              	vApplicationGetIdleTaskMemory:
  66              	.LVL3:
  67              	.LFB135:
  69:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  68              		.loc 1 69 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  70:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  73              		.loc 1 70 3 view .LVU6
  70:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  74              		.loc 1 70 25 is_stmt 0 view .LVU7
  75 0000 034B     		ldr	r3, .L5
  76 0002 0360     		str	r3, [r0]
  71:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  77              		.loc 1 71 3 is_stmt 1 view .LVU8
  71:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  78              		.loc 1 71 27 is_stmt 0 view .LVU9
  79 0004 034B     		ldr	r3, .L5+4
  80 0006 0B60     		str	r3, [r1]
  72:Core/Src/freertos.c ****   /* place for user code */
  81              		.loc 1 72 3 is_stmt 1 view .LVU10
  72:Core/Src/freertos.c ****   /* place for user code */
  82              		.loc 1 72 25 is_stmt 0 view .LVU11
  83 0008 8023     		movs	r3, #128
  84 000a 1360     		str	r3, [r2]
  74:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  85              		.loc 1 74 1 view .LVU12
  86 000c 7047     		bx	lr
  87              	.L6:
  88 000e 00BF     		.align	2
  89              	.L5:
  90 0010 00000000 		.word	.LANCHOR0
  91 0014 00000000 		.word	.LANCHOR1
  92              		.cfi_endproc
  93              	.LFE135:
ARM GAS  /tmp/ccGBb0Zx.s 			page 5


  95              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
  96              		.align	1
  97              		.global	MX_FREERTOS_Init
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	MX_FREERTOS_Init:
 104              	.LFB136:
  82:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 105              		.loc 1 82 29 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 32
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0000 30B5     		push	{r4, r5, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 12
 112              		.cfi_offset 4, -12
 113              		.cfi_offset 5, -8
 114              		.cfi_offset 14, -4
 115 0002 89B0     		sub	sp, sp, #36
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 48
 105:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 118              		.loc 1 105 3 view .LVU14
 119 0004 01AC     		add	r4, sp, #4
 120 0006 074D     		ldr	r5, .L9
 121 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 122 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 123 000c 95E80700 		ldm	r5, {r0, r1, r2}
 124 0010 84E80700 		stm	r4, {r0, r1, r2}
 106:Core/Src/freertos.c **** 
 125              		.loc 1 106 3 view .LVU15
 106:Core/Src/freertos.c **** 
 126              		.loc 1 106 23 is_stmt 0 view .LVU16
 127 0014 0021     		movs	r1, #0
 128 0016 01A8     		add	r0, sp, #4
 129 0018 FFF7FEFF 		bl	osThreadCreate
 130              	.LVL4:
 106:Core/Src/freertos.c **** 
 131              		.loc 1 106 21 view .LVU17
 132 001c 024B     		ldr	r3, .L9+4
 133 001e 1860     		str	r0, [r3]
 112:Core/Src/freertos.c **** 
 134              		.loc 1 112 1 view .LVU18
 135 0020 09B0     		add	sp, sp, #36
 136              	.LCFI3:
 137              		.cfi_def_cfa_offset 12
 138              		@ sp needed
 139 0022 30BD     		pop	{r4, r5, pc}
 140              	.L10:
 141              		.align	2
 142              	.L9:
 143 0024 00000000 		.word	.LANCHOR2
 144 0028 00000000 		.word	defaultTaskHandle
 145              		.cfi_endproc
 146              	.LFE136:
ARM GAS  /tmp/ccGBb0Zx.s 			page 6


 148              		.comm	defaultTaskHandle,4,4
 149              		.section	.rodata
 150              		.align	2
 151              		.set	.LANCHOR2,. + 0
 152              	.LC2:
 153 0000 00000000 		.word	.LC0
 154 0004 00000000 		.word	StartDefaultTask
 155 0008 0000     		.short	0
 156 000a 0000     		.space	2
 157 000c 00000000 		.word	0
 158 0010 80000000 		.word	128
 159 0014 00000000 		.word	0
 160 0018 00000000 		.word	0
 161              		.section	.bss.xIdleStack,"aw",%nobits
 162              		.align	2
 163              		.set	.LANCHOR1,. + 0
 166              	xIdleStack:
 167 0000 00000000 		.space	512
 167      00000000 
 167      00000000 
 167      00000000 
 167      00000000 
 168              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 169              		.align	2
 170              		.set	.LANCHOR0,. + 0
 173              	xIdleTaskTCBBuffer:
 174 0000 00000000 		.space	84
 174      00000000 
 174      00000000 
 174      00000000 
 174      00000000 
 175              		.text
 176              	.Letext0:
 177              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 178              		.file 3 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 179              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 180              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 181              		.file 6 "Core/Inc/FreeRTOSConfig.h"
 182              		.file 7 "Drivers/CMSIS/Include/core_cm4.h"
 183              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 184              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 185              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/ccGBb0Zx.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/ccGBb0Zx.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccGBb0Zx.s:22     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccGBb0Zx.s:30     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccGBb0Zx.s:58     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccGBb0Zx.s:65     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccGBb0Zx.s:90     .text.vApplicationGetIdleTaskMemory:0000000000000010 $d
     /tmp/ccGBb0Zx.s:96     .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccGBb0Zx.s:103    .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccGBb0Zx.s:143    .text.MX_FREERTOS_Init:0000000000000024 $d
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccGBb0Zx.s:150    .rodata:0000000000000000 $d
     /tmp/ccGBb0Zx.s:162    .bss.xIdleStack:0000000000000000 $d
     /tmp/ccGBb0Zx.s:166    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/ccGBb0Zx.s:169    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/ccGBb0Zx.s:173    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer

UNDEFINED SYMBOLS
osDelay
osThreadCreate
