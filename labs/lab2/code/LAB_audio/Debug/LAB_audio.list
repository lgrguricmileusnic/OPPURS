
LAB_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b58  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004ce0  08004ce0  00014ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed0  08004ed0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000099cb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e84  00000000  00000000  00029a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000908  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006da  00000000  00000000  0002c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020daa  00000000  00000000  0002c8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d271  00000000  00000000  0004d65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3f95  00000000  00000000  0005a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002750  00000000  00000000  0011e864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00120fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cc8 	.word	0x08004cc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cc8 	.word	0x08004cc8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b970 	b.w	8000dfc <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0xe2>
 8000b4a:	fab2 f382 	clz	r3, r2
 8000b4e:	b143      	cbz	r3, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	f1c3 0220 	rsb	r2, r3, #32
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	409c      	lsls	r4, r3
 8000b62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b66:	fa1f f58c 	uxth.w	r5, ip
 8000b6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6e:	0c22      	lsrs	r2, r4, #16
 8000b70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b78:	fb01 f005 	mul.w	r0, r1, r5
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d90a      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b80:	eb1c 0202 	adds.w	r2, ip, r2
 8000b84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b88:	f080 811c 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f240 8119 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000b92:	3902      	subs	r1, #2
 8000b94:	4462      	add	r2, ip
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba6:	fb00 f505 	mul.w	r5, r0, r5
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x90>
 8000bae:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x294>
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x294>
 8000bc0:	4464      	add	r4, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11e      	cbz	r6, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40dc      	lsrs	r4, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0xbc>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80ed 	beq.w	8000dbe <__udivmoddi4+0x28a>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d149      	bne.n	8000c8c <__udivmoddi4+0x158>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d302      	bcc.n	8000c02 <__udivmoddi4+0xce>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	f200 80f8 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c02:	1a84      	subs	r4, r0, r2
 8000c04:	eb65 0203 	sbc.w	r2, r5, r3
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0e2      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	e9c6 4700 	strd	r4, r7, [r6]
 8000c14:	e7df      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xe6>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f382 	clz	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8090 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c34:	fb07 2015 	mls	r0, r7, r5, r2
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3e:	fb0e f005 	mul.w	r0, lr, r5
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c46:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2b8>
 8000c56:	4645      	mov	r5, r8
 8000c58:	1a12      	subs	r2, r2, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c60:	fb07 2210 	mls	r2, r7, r0, r2
 8000c64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x14e>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x14c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2c2>
 8000c80:	4610      	mov	r0, r2
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c8a:	e79f      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c8c:	f1c1 0720 	rsb	r7, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca2:	40fd      	lsrs	r5, r7
 8000ca4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca8:	4323      	orrs	r3, r4
 8000caa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb6:	0c1c      	lsrs	r4, r3, #16
 8000cb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2b4>
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2b4>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4464      	add	r4, ip
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	b29d      	uxth	r5, r3
 8000ce8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cec:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2ac>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2ac>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d12:	fba3 9502 	umull	r9, r5, r3, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	42ac      	cmp	r4, r5
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46ae      	mov	lr, r5
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x29c>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x298>
 8000d24:	b156      	cbz	r6, 8000d3c <__udivmoddi4+0x208>
 8000d26:	ebb0 0208 	subs.w	r2, r0, r8
 8000d2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d32:	40ca      	lsrs	r2, r1
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	4317      	orrs	r7, r2
 8000d38:	e9c6 7400 	strd	r7, r4, [r6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	f1c3 0120 	rsb	r1, r3, #32
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d50:	fa25 f101 	lsr.w	r1, r5, r1
 8000d54:	409d      	lsls	r5, r3
 8000d56:	432a      	orrs	r2, r5
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d64:	fb07 1510 	mls	r5, r7, r0, r1
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d72:	428d      	cmp	r5, r1
 8000d74:	fa04 f403 	lsl.w	r4, r4, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x258>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000d84:	428d      	cmp	r5, r1
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4461      	add	r1, ip
 8000d8c:	1b49      	subs	r1, r1, r5
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d94:	fb07 1115 	mls	r1, r7, r5, r1
 8000d98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000da0:	4291      	cmp	r1, r2
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x282>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000dae:	4291      	cmp	r1, r2
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000db2:	3d02      	subs	r5, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a52      	subs	r2, r2, r1
 8000db8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0xfc>
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e6e6      	b.n	8000b96 <__udivmoddi4+0x62>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x90>
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000ddc:	4645      	mov	r5, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x282>
 8000de0:	462b      	mov	r3, r5
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x258>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dec:	3d02      	subs	r5, #2
 8000dee:	4462      	add	r2, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e70a      	b.n	8000c0c <__udivmoddi4+0xd8>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x14e>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <init_AudioReset>:
 *      Author: lovro.mileusnic
 */
#include "audio.h"
#include "i2c.h"
void init_AudioReset()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2110      	movs	r1, #16
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <init_AudioReset+0x14>)
 8000e0a:	f000 fefd 	bl	8001c08 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <configAudio>:

void configAudio()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
	uint8_t bytes[2];
	init_AudioReset();
 8000e1e:	f7ff ffef 	bl	8000e00 <init_AudioReset>

	/** Power sequence **/
	// Set Power Control Register to ‘‘on" state
	bytes [0] =0x02 ;
 8000e22:	2302      	movs	r3, #2
 8000e24:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x01 ;
 8000e26:	2301      	movs	r3, #1
 8000e28:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2302      	movs	r3, #2
 8000e32:	2194      	movs	r1, #148	; 0x94
 8000e34:	486f      	ldr	r0, [pc, #444]	; (8000ff4 <configAudio+0x1dc>)
 8000e36:	f001 f845 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	 /** Initialization sequence **/
	bytes [0] =0x00 ;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x99 ;
 8000e3e:	2399      	movs	r3, #153	; 0x99
 8000e40:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000e42:	1d3a      	adds	r2, r7, #4
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2194      	movs	r1, #148	; 0x94
 8000e4c:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <configAudio+0x1dc>)
 8000e4e:	f001 f839 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x47 ;
 8000e52:	2347      	movs	r3, #71	; 0x47
 8000e54:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x80 ;
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000e5a:	1d3a      	adds	r2, r7, #4
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2302      	movs	r3, #2
 8000e62:	2194      	movs	r1, #148	; 0x94
 8000e64:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <configAudio+0x1dc>)
 8000e66:	f001 f82d 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x32 ;
 8000e6a:	2332      	movs	r3, #50	; 0x32
 8000e6c:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x80 ;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000e72:	1d3a      	adds	r2, r7, #4
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2302      	movs	r3, #2
 8000e7a:	2194      	movs	r1, #148	; 0x94
 8000e7c:	485d      	ldr	r0, [pc, #372]	; (8000ff4 <configAudio+0x1dc>)
 8000e7e:	f001 f821 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x32 ;
 8000e82:	2332      	movs	r3, #50	; 0x32
 8000e84:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x0 ;
 8000e86:	2300      	movs	r3, #0
 8000e88:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000e8a:	1d3a      	adds	r2, r7, #4
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2302      	movs	r3, #2
 8000e92:	2194      	movs	r1, #148	; 0x94
 8000e94:	4857      	ldr	r0, [pc, #348]	; (8000ff4 <configAudio+0x1dc>)
 8000e96:	f001 f815 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x00 ;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x00 ;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000ea2:	1d3a      	adds	r2, r7, #4
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	2194      	movs	r1, #148	; 0x94
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <configAudio+0x1dc>)
 8000eae:	f001 f809 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	 /** Ctl registers configuration **/
	bytes [0] =0x04 ;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	713b      	strb	r3, [r7, #4]
	bytes [1] =0xAF ;
 8000eb6:	23af      	movs	r3, #175	; 0xaf
 8000eb8:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000eba:	1d3a      	adds	r2, r7, #4
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	2194      	movs	r1, #148	; 0x94
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <configAudio+0x1dc>)
 8000ec6:	f000 fffd 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x0D ;
 8000eca:	230d      	movs	r3, #13
 8000ecc:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x70 ;
 8000ece:	2370      	movs	r3, #112	; 0x70
 8000ed0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000ed2:	1d3a      	adds	r2, r7, #4
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2194      	movs	r1, #148	; 0x94
 8000edc:	4845      	ldr	r0, [pc, #276]	; (8000ff4 <configAudio+0x1dc>)
 8000ede:	f000 fff1 	bl	8001ec4 <HAL_I2C_Master_Transmit>


	bytes [0] =0x05 ;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x81 ;
 8000ee6:	2381      	movs	r3, #129	; 0x81
 8000ee8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	2194      	movs	r1, #148	; 0x94
 8000ef4:	483f      	ldr	r0, [pc, #252]	; (8000ff4 <configAudio+0x1dc>)
 8000ef6:	f000 ffe5 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x06 ;
 8000efa:	2306      	movs	r3, #6
 8000efc:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x07 ;
 8000efe:	2307      	movs	r3, #7
 8000f00:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f02:	1d3a      	adds	r2, r7, #4
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2194      	movs	r1, #148	; 0x94
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <configAudio+0x1dc>)
 8000f0e:	f000 ffd9 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x0A ;
 8000f12:	230a      	movs	r3, #10
 8000f14:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x00 ;
 8000f16:	2300      	movs	r3, #0
 8000f18:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f1a:	1d3a      	adds	r2, r7, #4
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	2194      	movs	r1, #148	; 0x94
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <configAudio+0x1dc>)
 8000f26:	f000 ffcd 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x27 ;
 8000f2a:	2327      	movs	r3, #39	; 0x27
 8000f2c:	713b      	strb	r3, [r7, #4]
	bytes [1] =0x00 ;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	2194      	movs	r1, #148	; 0x94
 8000f3c:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <configAudio+0x1dc>)
 8000f3e:	f000 ffc1 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] =0x1F ;
 8000f42:	231f      	movs	r3, #31
 8000f44:	713b      	strb	r3, [r7, #4]

	bytes [1] = 0x0F ;
 8000f46:	230f      	movs	r3, #15
 8000f48:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f4a:	1d3a      	adds	r2, r7, #4
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2302      	movs	r3, #2
 8000f52:	2194      	movs	r1, #148	; 0x94
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <configAudio+0x1dc>)
 8000f56:	f000 ffb5 	bl	8001ec4 <HAL_I2C_Master_Transmit>


	bytes [0] = 0x22 ;
 8000f5a:	2322      	movs	r3, #34	; 0x22
 8000f5c:	713b      	strb	r3, [r7, #4]
	bytes [1] = 0xC0 ;
 8000f5e:	23c0      	movs	r3, #192	; 0xc0
 8000f60:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f62:	1d3a      	adds	r2, r7, #4
 8000f64:	2364      	movs	r3, #100	; 0x64
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	2194      	movs	r1, #148	; 0x94
 8000f6c:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <configAudio+0x1dc>)
 8000f6e:	f000 ffa9 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] = 0x14 ;
 8000f72:	2314      	movs	r3, #20
 8000f74:	713b      	strb	r3, [r7, #4]
	bytes [1] = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2302      	movs	r3, #2
 8000f82:	2194      	movs	r1, #148	; 0x94
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <configAudio+0x1dc>)
 8000f86:	f000 ff9d 	bl	8001ec4 <HAL_I2C_Master_Transmit>


	bytes [0] = 0x15 ;
 8000f8a:	2315      	movs	r3, #21
 8000f8c:	713b      	strb	r3, [r7, #4]
	bytes [1] = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000f92:	1d3a      	adds	r2, r7, #4
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	2194      	movs	r1, #148	; 0x94
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <configAudio+0x1dc>)
 8000f9e:	f000 ff91 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	bytes [0] = 0x20 ;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	713b      	strb	r3, [r7, #4]
	bytes [1] = 24;
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000faa:	1d3a      	adds	r2, r7, #4
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	2194      	movs	r1, #148	; 0x94
 8000fb4:	480f      	ldr	r0, [pc, #60]	; (8000ff4 <configAudio+0x1dc>)
 8000fb6:	f000 ff85 	bl	8001ec4 <HAL_I2C_Master_Transmit>


	bytes [0] = 0x21 ;
 8000fba:	2321      	movs	r3, #33	; 0x21
 8000fbc:	713b      	strb	r3, [r7, #4]
	bytes [1] = 24;
 8000fbe:	2318      	movs	r3, #24
 8000fc0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000fc2:	1d3a      	adds	r2, r7, #4
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	2194      	movs	r1, #148	; 0x94
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <configAudio+0x1dc>)
 8000fce:	f000 ff79 	bl	8001ec4 <HAL_I2C_Master_Transmit>

	/** Power up **/
	bytes [0] = 0x02 ;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	713b      	strb	r3, [r7, #4]
	bytes [1] = 0x9E ;
 8000fd6:	239e      	movs	r3, #158	; 0x9e
 8000fd8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	2194      	movs	r1, #148	; 0x94
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <configAudio+0x1dc>)
 8000fe6:	f000 ff6d 	bl	8001ec4 <HAL_I2C_Master_Transmit>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000028 	.word	0x20000028

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <MX_GPIO_Init+0xd4>)
 80010a0:	f000 fdb2 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a4:	2310      	movs	r3, #16
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_GPIO_Init+0xd4>)
 80010bc:	f000 fc08 	bl	80018d0 <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020c00 	.word	0x40020c00

080010d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C1_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <MX_I2C1_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C1_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_I2C1_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_I2C1_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2C1_Init+0x50>)
 800110e:	f000 fd95 	bl	8001c3c <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f9ee 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000028 	.word	0x20000028
 8001124:	40005400 	.word	0x40005400
 8001128:	000186a0 	.word	0x000186a0

0800112c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_I2C_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12c      	bne.n	80011a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800116a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_I2C_MspInit+0x8c>)
 8001188:	f000 fba2 	bl	80018d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_I2C_MspInit+0x88>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_I2S3_Init+0x54>)
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <MX_I2S3_Init+0x58>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2S3_Init+0x54>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_I2S3_Init+0x54>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2S3_Init+0x54>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_I2S3_Init+0x54>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_I2S3_Init+0x54>)
 80011e4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011e8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2S3_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_I2S3_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2S3_Init+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2S3_Init+0x54>)
 80011fe:	f001 f969 	bl	80024d4 <HAL_I2S_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001208:	f000 f976 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000007c 	.word	0x2000007c
 8001214:	40003c00 	.word	0x40003c00

08001218 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_I2S_MspInit+0xf0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d15a      	bne.n	80012fe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001248:	2301      	movs	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800124c:	23c0      	movs	r3, #192	; 0xc0
 800124e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fb89 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001264:	f000 f948 	bl	80014f8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_I2S_MspInit+0xf4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_I2S_MspInit+0xf4>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_I2S_MspInit+0xf4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_I2S_MspInit+0xf4>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_I2S_MspInit+0xf4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_I2S_MspInit+0xf4>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_I2S_MspInit+0xf4>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_I2S_MspInit+0xf4>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_I2S_MspInit+0xf4>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012bc:	2310      	movs	r3, #16
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012cc:	2306      	movs	r3, #6
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <HAL_I2S_MspInit+0xf8>)
 80012d8:	f000 fafa 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80012dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ee:	2306      	movs	r3, #6
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <HAL_I2S_MspInit+0xfc>)
 80012fa:	f000 fae9 	bl	80018d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3738      	adds	r7, #56	; 0x38
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40003c00 	.word	0x40003c00
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020800 	.word	0x40020800

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 f97f 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f87f 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f7ff fe67 	bl	8000ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800132a:	f7ff fed1 	bl	80010d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800132e:	f7ff ff45 	bl	80011bc <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  configAudio();
 8001332:	f7ff fd71 	bl	8000e18 <configAudio>
  uint16_t signal;
  double sin_value;
  double i = 0;
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sin_value = sin(2 * PI * FREQ * (i/SAMPLE_FREQ));
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <main+0x100>)
 8001348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134c:	f7ff fa22 	bl	8000794 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	a32b      	add	r3, pc, #172	; (adr r3, 8001408 <main+0xf0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f8ef 	bl	8000540 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	ec43 2b17 	vmov	d7, r2, r3
 800136a:	eeb0 0a47 	vmov.f32	s0, s14
 800136e:	eef0 0a67 	vmov.f32	s1, s15
 8001372:	f002 fc69 	bl	8003c48 <sin>
 8001376:	ed87 0b02 	vstr	d0, [r7, #8]
	  signal = (uint16_t) (((sin_value + 1.0) / 2.0) * 65535);
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <main+0x104>)
 8001380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001384:	f7fe ff26 	bl	80001d4 <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001398:	f7ff f9fc 	bl	8000794 <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001410 <main+0xf8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f8c9 	bl	8000540 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fb85 	bl	8000ac4 <__aeabi_d2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	80fb      	strh	r3, [r7, #6]
	  HAL_I2S_Transmit(&hi2s3, &signal, 1, 10);
 80013c0:	1db9      	adds	r1, r7, #6
 80013c2:	230a      	movs	r3, #10
 80013c4:	2201      	movs	r2, #1
 80013c6:	4816      	ldr	r0, [pc, #88]	; (8001420 <main+0x108>)
 80013c8:	f001 f9c4 	bl	8002754 <HAL_I2S_Transmit>

	  i++;
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <main+0x104>)
 80013d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013d6:	f7fe fefd 	bl	80001d4 <__adddf3>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  if (i >= SAMPLE_FREQ)
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <main+0x100>)
 80013e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ec:	f7ff fb2e 	bl	8000a4c <__aeabi_dcmpge>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <main+0xea>
		  i = 0;
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  sin_value = sin(2 * PI * FREQ * (i/SAMPLE_FREQ));
 8001402:	e79e      	b.n	8001342 <main+0x2a>
 8001404:	f3af 8000 	nop.w
 8001408:	60000000 	.word	0x60000000
 800140c:	40a78fda 	.word	0x40a78fda
 8001410:	00000000 	.word	0x00000000
 8001414:	40efffe0 	.word	0x40efffe0
 8001418:	40bf4000 	.word	0x40bf4000
 800141c:	3ff00000 	.word	0x3ff00000
 8001420:	2000007c 	.word	0x2000007c

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fbdc 	bl	8003bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SystemClock_Config+0xcc>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <SystemClock_Config+0xcc>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <SystemClock_Config+0xcc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <SystemClock_Config+0xd0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <SystemClock_Config+0xd0>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <SystemClock_Config+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001498:	23a8      	movs	r3, #168	; 0xa8
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fddd 	bl	8003068 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b4:	f000 f820 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2105      	movs	r1, #5
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 f83e 	bl	8003558 <HAL_RCC_ClockConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014e2:	f000 f809 	bl	80014f8 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	3750      	adds	r7, #80	; 0x50
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f890 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd7 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f002 fb01 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fe8b 	bl	8001318 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001610:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 8001614:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001618:	200000c8 	.word	0x200000c8

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f90d 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff ff56 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f917 	bl	80018b6 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a0:	f000 f8ed 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200000c4 	.word	0x200000c4

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200000c4 	.word	0x200000c4

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff47 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff5c 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffb0 	bl	8001824 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e16b      	b.n	8001bc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 815a 	bne.w	8001bbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	2b02      	cmp	r3, #2
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d017      	beq.n	80019c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d123      	bne.n	8001a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80b4 	beq.w	8001bbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_GPIO_Init+0x310>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_GPIO_Init+0x314>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02b      	beq.n	8001af6 <HAL_GPIO_Init+0x226>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_GPIO_Init+0x318>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d025      	beq.n	8001af2 <HAL_GPIO_Init+0x222>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_GPIO_Init+0x31c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x21e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_GPIO_Init+0x320>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x21a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x216>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x328>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x212>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x32c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x330>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x20a>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e00e      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ada:	2308      	movs	r3, #8
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x310>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3a:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f ae90 	bls.w	80018ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e12b      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fa62 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f001 fe52 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a81      	ldr	r2, [pc, #516]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d807      	bhi.n	8001cc0 <HAL_I2C_Init+0x84>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a80      	ldr	r2, [pc, #512]	; (8001eb4 <HAL_I2C_Init+0x278>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e006      	b.n	8001cce <HAL_I2C_Init+0x92>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a7d      	ldr	r2, [pc, #500]	; (8001eb8 <HAL_I2C_Init+0x27c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e7      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a78      	ldr	r2, [pc, #480]	; (8001ebc <HAL_I2C_Init+0x280>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d802      	bhi.n	8001d10 <HAL_I2C_Init+0xd4>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	e009      	b.n	8001d24 <HAL_I2C_Init+0xe8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a69      	ldr	r2, [pc, #420]	; (8001ec0 <HAL_I2C_Init+0x284>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	3301      	adds	r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	495c      	ldr	r1, [pc, #368]	; (8001eb0 <HAL_I2C_Init+0x274>)
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d819      	bhi.n	8001d78 <HAL_I2C_Init+0x13c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e59      	subs	r1, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d58:	400b      	ands	r3, r1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_I2C_Init+0x138>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e59      	subs	r1, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	e051      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e04f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_I2C_Init+0x168>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e012      	b.n	8001dca <HAL_I2C_Init+0x18e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x196>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e022      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <HAL_I2C_Init+0x1bc>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e58      	subs	r0, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6809      	ldr	r1, [r1, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	000186a0 	.word	0x000186a0
 8001eb4:	001e847f 	.word	0x001e847f
 8001eb8:	003d08ff 	.word	0x003d08ff
 8001ebc:	431bde83 	.word	0x431bde83
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	817b      	strh	r3, [r7, #10]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fc08 	bl	80016ec <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	f040 80e0 	bne.w	80020ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2319      	movs	r3, #25
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4970      	ldr	r1, [pc, #448]	; (80020b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f964 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0d3      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2C_Master_Transmit+0x50>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0cc      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d007      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2221      	movs	r2, #33	; 0x21
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2210      	movs	r2, #16
 8001f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	893a      	ldrh	r2, [r7, #8]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_I2C_Master_Transmit+0x1f8>)
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f7c:	8979      	ldrh	r1, [r7, #10]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f89c 	bl	80020c0 <I2C_MasterRequestWrite>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e08d      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fa8:	e066      	b.n	8002078 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9de 	bl	8002370 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d107      	bne.n	8001fd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_I2C_Master_Transmit+0x188>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f9ce 	bl	80023f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e01a      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d194      	bne.n	8001faa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	00100002 	.word	0x00100002
 80020bc:	ffff0000 	.word	0xffff0000

080020c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	460b      	mov	r3, r1
 80020ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d006      	beq.n	80020ea <I2C_MasterRequestWrite+0x2a>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d003      	beq.n	80020ea <I2C_MasterRequestWrite+0x2a>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020e8:	d108      	bne.n	80020fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00b      	b.n	8002114 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	2b12      	cmp	r3, #18
 8002102:	d107      	bne.n	8002114 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f84f 	bl	80021c4 <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213a:	d103      	bne.n	8002144 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e035      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e01b      	b.n	800219c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002164:	897b      	ldrh	r3, [r7, #10]
 8002166:	11db      	asrs	r3, r3, #7
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 0306 	and.w	r3, r3, #6
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f063 030f 	orn	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <I2C_MasterRequestWrite+0xfc>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f875 	bl	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e010      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <I2C_MasterRequestWrite+0x100>)
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f865 	bl	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	00010008 	.word	0x00010008
 80021c0:	00010002 	.word	0x00010002

080021c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	e025      	b.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021dc:	d021      	beq.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7ff fa85 	bl	80016ec <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d116      	bne.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e023      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10d      	bne.n	8002248 <I2C_WaitOnFlagUntilTimeout+0x84>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	e00c      	b.n	8002262 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4013      	ands	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	429a      	cmp	r2, r3
 8002266:	d0b6      	beq.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002280:	e051      	b.n	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002290:	d123      	bne.n	80022da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0204 	orr.w	r2, r3, #4
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e046      	b.n	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e0:	d021      	beq.n	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff fa03 	bl	80016ec <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e020      	b.n	8002368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10c      	bne.n	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4013      	ands	r3, r2
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	e00b      	b.n	8002362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	43da      	mvns	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4013      	ands	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d18d      	bne.n	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237c:	e02d      	b.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f878 	bl	8002474 <I2C_IsAcknowledgeFailed>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e02d      	b.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002394:	d021      	beq.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f9a9 	bl	80016ec <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e007      	b.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d1ca      	bne.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fe:	e02d      	b.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f837 	bl	8002474 <I2C_IsAcknowledgeFailed>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02d      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002416:	d021      	beq.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002418:	f7ff f968 	bl	80016ec <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	429a      	cmp	r2, r3
 8002426:	d302      	bcc.n	800242e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b04      	cmp	r3, #4
 8002468:	d1ca      	bne.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248a:	d11b      	bne.n	80024c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e128      	b.n	8002738 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a90      	ldr	r2, [pc, #576]	; (8002740 <HAL_I2S_Init+0x26c>)
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe fe89 	bl	8001218 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800251c:	f023 030f 	bic.w	r3, r3, #15
 8002520:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d060      	beq.n	80025f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800253a:	2310      	movs	r3, #16
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e001      	b.n	8002544 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b20      	cmp	r3, #32
 800254a:	d802      	bhi.n	8002552 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002552:	2001      	movs	r0, #1
 8002554:	f001 faee 	bl	8003b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8002558:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d125      	bne.n	80025b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fbb2 f2f3 	udiv	r2, r2, r3
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	3305      	adds	r3, #5
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e01f      	b.n	80025ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	fbb2 f2f3 	udiv	r2, r2, r3
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	3305      	adds	r3, #5
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e00e      	b.n	80025ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	461a      	mov	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	3305      	adds	r3, #5
 80025cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <HAL_I2S_Init+0x270>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e003      	b.n	80025fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d902      	bls.n	8002608 <HAL_I2S_Init+0x134>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	d907      	bls.n	8002618 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	f043 0210 	orr.w	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e08f      	b.n	8002738 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	ea42 0103 	orr.w	r1, r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	430a      	orrs	r2, r1
 800262a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002636:	f023 030f 	bic.w	r3, r3, #15
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6851      	ldr	r1, [r2, #4]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68d2      	ldr	r2, [r2, #12]
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6992      	ldr	r2, [r2, #24]
 800264e:	430a      	orrs	r2, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800265a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d161      	bne.n	8002728 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <HAL_I2S_Init+0x274>)
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a37      	ldr	r2, [pc, #220]	; (800274c <HAL_I2S_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_I2S_Init+0x1a4>
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_I2S_Init+0x27c>)
 8002676:	e001      	b.n	800267c <HAL_I2S_Init+0x1a8>
 8002678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4932      	ldr	r1, [pc, #200]	; (800274c <HAL_I2S_Init+0x278>)
 8002684:	428a      	cmp	r2, r1
 8002686:	d101      	bne.n	800268c <HAL_I2S_Init+0x1b8>
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_I2S_Init+0x27c>)
 800268a:	e001      	b.n	8002690 <HAL_I2S_Init+0x1bc>
 800268c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002690:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002694:	f023 030f 	bic.w	r3, r3, #15
 8002698:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_I2S_Init+0x278>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_I2S_Init+0x1d4>
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_I2S_Init+0x27c>)
 80026a6:	e001      	b.n	80026ac <HAL_I2S_Init+0x1d8>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ac:	2202      	movs	r2, #2
 80026ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a25      	ldr	r2, [pc, #148]	; (800274c <HAL_I2S_Init+0x278>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_I2S_Init+0x1ea>
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_I2S_Init+0x27c>)
 80026bc:	e001      	b.n	80026c2 <HAL_I2S_Init+0x1ee>
 80026be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ce:	d003      	beq.n	80026d8 <HAL_I2S_Init+0x204>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e001      	b.n	80026e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002702:	4313      	orrs	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	4313      	orrs	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002710:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_I2S_Init+0x278>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_I2S_Init+0x24c>
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_I2S_Init+0x27c>)
 800271e:	e001      	b.n	8002724 <HAL_I2S_Init+0x250>
 8002720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002724:	897a      	ldrh	r2, [r7, #10]
 8002726:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	08002a2d 	.word	0x08002a2d
 8002744:	cccccccd 	.word	0xcccccccd
 8002748:	08002bb5 	.word	0x08002bb5
 800274c:	40003800 	.word	0x40003800
 8002750:	40003400 	.word	0x40003400

08002754 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_I2S_Transmit+0x1c>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0dc      	b.n	800292e <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2S_Transmit+0x30>
 8002780:	2302      	movs	r3, #2
 8002782:	e0d4      	b.n	800292e <HAL_I2S_Transmit+0x1da>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0c4      	b.n	800292e <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2203      	movs	r2, #3
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d002      	beq.n	80027d0 <HAL_I2S_Transmit+0x7c>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d10a      	bne.n	80027e6 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e4:	e005      	b.n	80027f2 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d007      	beq.n	800281a <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002818:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	2102      	movs	r1, #2
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f98d 	bl	8002b40 <I2S_WaitFlagStateUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d04e      	beq.n	80028ca <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e070      	b.n	800292e <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c9a      	adds	r2, r3, #2
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	2102      	movs	r1, #2
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f962 	bl	8002b40 <I2S_WaitFlagStateUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00f      	beq.n	80028a2 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e045      	b.n	800292e <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d10c      	bne.n	80028ca <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0204 	orr.w	r2, r3, #4
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1bb      	bne.n	800284c <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d118      	bne.n	800291c <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f925 	bl	8002b40 <I2S_WaitFlagStateUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e008      	b.n	800292e <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	881a      	ldrh	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c9a      	adds	r2, r3, #2
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10e      	bne.n	80029c6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ffb8 	bl	8002936 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	b292      	uxth	r2, r2
 80029e2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff93 	bl	800294a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d13a      	bne.n	8002abe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d109      	bne.n	8002a66 <I2S_IRQHandler+0x3a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b40      	cmp	r3, #64	; 0x40
 8002a5e:	d102      	bne.n	8002a66 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffb4 	bl	80029ce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d126      	bne.n	8002abe <I2S_IRQHandler+0x92>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d11f      	bne.n	8002abe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a8c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f043 0202 	orr.w	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff50 	bl	800295e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d136      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d109      	bne.n	8002ae8 <I2S_IRQHandler+0xbc>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d102      	bne.n	8002ae8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff45 	bl	8002972 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d11b      	bne.n	8002b38 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b0e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff13 	bl	800295e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b50:	f7fe fdcc 	bl	80016ec <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b56:	e018      	b.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5e:	d014      	beq.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002b60:	f7fe fdc4 	bl	80016ec <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d902      	bls.n	8002b76 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e00f      	b.n	8002baa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1d7      	bne.n	8002b58 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a92      	ldr	r2, [pc, #584]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bce:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bd0:	e001      	b.n	8002bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a8b      	ldr	r2, [pc, #556]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bec:	4b8a      	ldr	r3, [pc, #552]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bee:	e001      	b.n	8002bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c00:	d004      	beq.n	8002c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8099 	bne.w	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f925 	bl	8002e70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f9c8 	bl	8002fd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d13a      	bne.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d035      	beq.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6e      	ldr	r2, [pc, #440]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c60:	e001      	b.n	8002c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4969      	ldr	r1, [pc, #420]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c6e:	428b      	cmp	r3, r1
 8002c70:	d101      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c72:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c74:	e001      	b.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fe4f 	bl	800295e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	f040 80c3 	bne.w	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80bd 	beq.w	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ce6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a49      	ldr	r2, [pc, #292]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cf4:	e001      	b.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4944      	ldr	r1, [pc, #272]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d101      	bne.n	8002d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d08:	e001      	b.n	8002d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fe11 	bl	800295e <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d3c:	e089      	b.n	8002e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d107      	bne.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8be 	bl	8002ed4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8fd 	bl	8002f6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d12f      	bne.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02a      	beq.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002da2:	e001      	b.n	8002da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4919      	ldr	r1, [pc, #100]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002db0:	428b      	cmp	r3, r1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db6:	e001      	b.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fdc1 	bl	800295e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d136      	bne.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d031      	beq.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dfc:	e001      	b.n	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4902      	ldr	r1, [pc, #8]	; (8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e0a:	428b      	cmp	r3, r1
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e0e:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e10:	e006      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e12:	bf00      	nop
 8002e14:	40003800 	.word	0x40003800
 8002e18:	40003400 	.word	0x40003400
 8002e1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e24:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fd87 	bl	800295e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	e000      	b.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e52:	bf00      	nop
}
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c99      	adds	r1, r3, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6251      	str	r1, [r2, #36]	; 0x24
 8002e82:	881a      	ldrh	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d106      	bne.n	8002eca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ffc9 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c99      	adds	r1, r3, #2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ee6:	8819      	ldrh	r1, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <I2SEx_TxISR_I2SExt+0x22>
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002ef4:	e001      	b.n	8002efa <I2SEx_TxISR_I2SExt+0x26>
 8002ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002efa:	460a      	mov	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d121      	bne.n	8002f5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <I2SEx_TxISR_I2SExt+0x50>
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002f22:	e001      	b.n	8002f28 <I2SEx_TxISR_I2SExt+0x54>
 8002f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	490d      	ldr	r1, [pc, #52]	; (8002f64 <I2SEx_TxISR_I2SExt+0x90>)
 8002f30:	428b      	cmp	r3, r1
 8002f32:	d101      	bne.n	8002f38 <I2SEx_TxISR_I2SExt+0x64>
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <I2SEx_TxISR_I2SExt+0x94>)
 8002f36:	e001      	b.n	8002f3c <I2SEx_TxISR_I2SExt+0x68>
 8002f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff81 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40003800 	.word	0x40003800
 8002f68:	40003400 	.word	0x40003400

08002f6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d8      	ldr	r0, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	1c99      	adds	r1, r3, #2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f84:	b282      	uxth	r2, r0
 8002f86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d113      	bne.n	8002fc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff4a 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <I2SEx_RxISR_I2SExt+0x16>
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 8002fe4:	e001      	b.n	8002fea <I2SEx_RxISR_I2SExt+0x1a>
 8002fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fea:	68d8      	ldr	r0, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	1c99      	adds	r1, r3, #2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ff6:	b282      	uxth	r2, r0
 8002ff8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d121      	bne.n	8003056 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <I2SEx_RxISR_I2SExt+0x50>
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 800301e:	e001      	b.n	8003024 <I2SEx_RxISR_I2SExt+0x54>
 8003020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	490d      	ldr	r1, [pc, #52]	; (8003060 <I2SEx_RxISR_I2SExt+0x90>)
 800302c:	428b      	cmp	r3, r1
 800302e:	d101      	bne.n	8003034 <I2SEx_RxISR_I2SExt+0x64>
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <I2SEx_RxISR_I2SExt+0x94>)
 8003032:	e001      	b.n	8003038 <I2SEx_RxISR_I2SExt+0x68>
 8003034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800303c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff03 	bl	8002e5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40003800 	.word	0x40003800
 8003064:	40003400 	.word	0x40003400

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e267      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003086:	4b88      	ldr	r3, [pc, #544]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b7e      	ldr	r3, [pc, #504]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e242      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b76      	ldr	r3, [pc, #472]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b70      	ldr	r3, [pc, #448]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6f      	ldr	r2, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b69      	ldr	r3, [pc, #420]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a68      	ldr	r2, [pc, #416]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fae4 	bl	80016ec <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fae0 	bl	80016ec <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e207      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fad0 	bl	80016ec <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe facc 	bl	80016ec <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1f3      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c7      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4937      	ldr	r1, [pc, #220]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_OscConfig+0x244>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe fa85 	bl	80016ec <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe fa81 	bl	80016ec <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a8      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4925      	ldr	r1, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCC_OscConfig+0x244>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fa64 	bl	80016ec <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fa60 	bl	80016ec <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e187      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d036      	beq.n	80032c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_RCC_OscConfig+0x248>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fa44 	bl	80016ec <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fa40 	bl	80016ec <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e167      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_OscConfig+0x240>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e01b      	b.n	80032c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_OscConfig+0x248>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fa2d 	bl	80016ec <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e00e      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe fa29 	bl	80016ec <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d907      	bls.n	80032b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e150      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470000 	.word	0x42470000
 80032b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ea      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8097 	beq.w	80033fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	4b7d      	ldr	r3, [pc, #500]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a7c      	ldr	r2, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b77      	ldr	r3, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b74      	ldr	r3, [pc, #464]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe f9e9 	bl	80016ec <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe f9e5 	bl	80016ec <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e10c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x474>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x2ea>
 8003344:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x30c>
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5e      	ldr	r2, [pc, #376]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003374:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a57      	ldr	r2, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	4b55      	ldr	r3, [pc, #340]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe f9aa 	bl	80016ec <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe f9a6 	bl	80016ec <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0cb      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	4b49      	ldr	r3, [pc, #292]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ee      	beq.n	800339c <HAL_RCC_OscConfig+0x334>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe f994 	bl	80016ec <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe f990 	bl	80016ec <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0b5      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ee      	bne.n	80033c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b39      	ldr	r3, [pc, #228]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	4a38      	ldr	r2, [pc, #224]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a1 	beq.w	8003548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003406:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d05c      	beq.n	80034cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d141      	bne.n	800349e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe f964 	bl	80016ec <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe f960 	bl	80016ec <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e087      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	491b      	ldr	r1, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe f939 	bl	80016ec <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe f935 	bl	80016ec <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e05c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x416>
 800349c:	e054      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe f922 	bl	80016ec <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe f91e 	bl	80016ec <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e045      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x444>
 80034ca:	e03d      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e038      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x4ec>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d028      	beq.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d121      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11a      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90c      	bls.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b65      	ldr	r3, [pc, #404]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a58      	ldr	r2, [pc, #352]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3f      	ldr	r3, [pc, #252]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e067      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4934      	ldr	r1, [pc, #208]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fe f850 	bl	80016ec <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fe f84c 	bl	80016ec <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20c      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd ffb0 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00
 8003714:	40023800 	.word	0x40023800
 8003718:	08004ce0 	.word	0x08004ce0
 800371c:	20000000 	.word	0x20000000
 8003720:	20000004 	.word	0x20000004

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b094      	sub	sp, #80	; 0x50
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
 8003730:	2300      	movs	r3, #0
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	2300      	movs	r3, #0
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80e1 	bhi.w	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e0db      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800375c:	e0db      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_RCC_GetSysClockFreq+0x208>)
 8003760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003762:	e0d8      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
 8003784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	633b      	str	r3, [r7, #48]	; 0x30
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a8:	0150      	lsls	r0, r2, #5
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4621      	mov	r1, r4
 80037b0:	1a51      	subs	r1, r2, r1
 80037b2:	6139      	str	r1, [r7, #16]
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d2:	4651      	mov	r1, sl
 80037d4:	018a      	lsls	r2, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	ebb2 0801 	subs.w	r8, r2, r1
 80037dc:	4659      	mov	r1, fp
 80037de:	eb63 0901 	sbc.w	r9, r3, r1
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	eb18 0303 	adds.w	r3, r8, r3
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	462b      	mov	r3, r5
 8003804:	eb49 0303 	adc.w	r3, r9, r3
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003816:	4629      	mov	r1, r5
 8003818:	024b      	lsls	r3, r1, #9
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003820:	4621      	mov	r1, r4
 8003822:	024a      	lsls	r2, r1, #9
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 800382e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003834:	f7fd f966 	bl	8000b04 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	e058      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	4618      	mov	r0, r3
 800384c:	4611      	mov	r1, r2
 800384e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0159      	lsls	r1, r3, #5
 800386a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386e:	0150      	lsls	r0, r2, #5
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4641      	mov	r1, r8
 8003876:	ebb2 0a01 	subs.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003894:	ebb2 040a 	subs.w	r4, r2, sl
 8003898:	eb63 050b 	sbc.w	r5, r3, fp
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	464b      	mov	r3, r9
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ca:	4629      	mov	r1, r5
 80038cc:	028b      	lsls	r3, r1, #10
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d4:	4621      	mov	r1, r4
 80038d6:	028a      	lsls	r2, r1, #10
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e8:	f7fd f90c 	bl	8000b04 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003918:	4618      	mov	r0, r3
 800391a:	3750      	adds	r7, #80	; 0x50
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400
 800392c:	007a1200 	.word	0x007a1200

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_GetHCLKFreq+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000000 	.word	0x20000000

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff0 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0a9b      	lsrs	r3, r3, #10
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	08004cf0 	.word	0x08004cf0

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003994:	2b00      	cmp	r3, #0
 8003996:	d035      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003998:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800399e:	f7fd fea5 	bl	80016ec <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039a6:	f7fd fea1 	bl	80016ec <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0b0      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b8:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	019a      	lsls	r2, r3, #6
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	071b      	lsls	r3, r3, #28
 80039d0:	4955      	ldr	r1, [pc, #340]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039d8:	4b52      	ldr	r3, [pc, #328]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039de:	f7fd fe85 	bl	80016ec <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039e6:	f7fd fe81 	bl	80016ec <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e090      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f8:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8083 	beq.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a2e:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3e      	ldr	r2, [pc, #248]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fe57 	bl	80016ec <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fd fe53 	bl	80016ec <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e062      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a54:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d02f      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d028      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a88:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8e:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a9a:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d114      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fe21 	bl	80016ec <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd fe1d 	bl	80016ec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e02a      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ee      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003adc:	d10d      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	490d      	ldr	r1, [pc, #52]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]
 8003af8:	e005      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	4905      	ldr	r1, [pc, #20]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	42470068 	.word	0x42470068
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42470e40 	.word	0x42470e40

08003b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d13e      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d12f      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b68:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b6a:	617b      	str	r3, [r7, #20]
          break;
 8003b6c:	e02f      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d108      	bne.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e007      	b.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb8:	0f1b      	lsrs	r3, r3, #28
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
          break;
 8003bc6:	e002      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
          break;
 8003bcc:	bf00      	nop
        }
      }
      break;
 8003bce:	bf00      	nop
    }
  }
  return frequency;
 8003bd0:	697b      	ldr	r3, [r7, #20]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00bb8000 	.word	0x00bb8000
 8003be8:	007a1200 	.word	0x007a1200
 8003bec:	00f42400 	.word	0x00f42400

08003bf0 <memset>:
 8003bf0:	4402      	add	r2, r0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <memset+0xa>
 8003bf8:	4770      	bx	lr
 8003bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfe:	e7f9      	b.n	8003bf4 <memset+0x4>

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4d0d      	ldr	r5, [pc, #52]	; (8003c38 <__libc_init_array+0x38>)
 8003c04:	4c0d      	ldr	r4, [pc, #52]	; (8003c3c <__libc_init_array+0x3c>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	4d0b      	ldr	r5, [pc, #44]	; (8003c40 <__libc_init_array+0x40>)
 8003c12:	4c0c      	ldr	r4, [pc, #48]	; (8003c44 <__libc_init_array+0x44>)
 8003c14:	f001 f858 	bl	8004cc8 <_init>
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08004ed8 	.word	0x08004ed8
 8003c3c:	08004ed8 	.word	0x08004ed8
 8003c40:	08004ed8 	.word	0x08004ed8
 8003c44:	08004edc 	.word	0x08004edc

08003c48 <sin>:
 8003c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c4a:	ec53 2b10 	vmov	r2, r3, d0
 8003c4e:	4828      	ldr	r0, [pc, #160]	; (8003cf0 <sin+0xa8>)
 8003c50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c54:	4281      	cmp	r1, r0
 8003c56:	dc07      	bgt.n	8003c68 <sin+0x20>
 8003c58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003ce8 <sin+0xa0>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	b005      	add	sp, #20
 8003c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c64:	f000 b910 	b.w	8003e88 <__kernel_sin>
 8003c68:	4822      	ldr	r0, [pc, #136]	; (8003cf4 <sin+0xac>)
 8003c6a:	4281      	cmp	r1, r0
 8003c6c:	dd09      	ble.n	8003c82 <sin+0x3a>
 8003c6e:	ee10 0a10 	vmov	r0, s0
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fc faac 	bl	80001d0 <__aeabi_dsub>
 8003c78:	ec41 0b10 	vmov	d0, r0, r1
 8003c7c:	b005      	add	sp, #20
 8003c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c82:	4668      	mov	r0, sp
 8003c84:	f000 f9c0 	bl	8004008 <__ieee754_rem_pio2>
 8003c88:	f000 0003 	and.w	r0, r0, #3
 8003c8c:	2801      	cmp	r0, #1
 8003c8e:	d00c      	beq.n	8003caa <sin+0x62>
 8003c90:	2802      	cmp	r0, #2
 8003c92:	d011      	beq.n	8003cb8 <sin+0x70>
 8003c94:	b9f0      	cbnz	r0, 8003cd4 <sin+0x8c>
 8003c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c9a:	ed9d 0b00 	vldr	d0, [sp]
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f000 f8f2 	bl	8003e88 <__kernel_sin>
 8003ca4:	ec51 0b10 	vmov	r0, r1, d0
 8003ca8:	e7e6      	b.n	8003c78 <sin+0x30>
 8003caa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cae:	ed9d 0b00 	vldr	d0, [sp]
 8003cb2:	f000 f821 	bl	8003cf8 <__kernel_cos>
 8003cb6:	e7f5      	b.n	8003ca4 <sin+0x5c>
 8003cb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cbc:	ed9d 0b00 	vldr	d0, [sp]
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f000 f8e1 	bl	8003e88 <__kernel_sin>
 8003cc6:	ec53 2b10 	vmov	r2, r3, d0
 8003cca:	ee10 0a10 	vmov	r0, s0
 8003cce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003cd2:	e7d1      	b.n	8003c78 <sin+0x30>
 8003cd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cd8:	ed9d 0b00 	vldr	d0, [sp]
 8003cdc:	f000 f80c 	bl	8003cf8 <__kernel_cos>
 8003ce0:	e7f1      	b.n	8003cc6 <sin+0x7e>
 8003ce2:	bf00      	nop
 8003ce4:	f3af 8000 	nop.w
	...
 8003cf0:	3fe921fb 	.word	0x3fe921fb
 8003cf4:	7fefffff 	.word	0x7fefffff

08003cf8 <__kernel_cos>:
 8003cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	ec57 6b10 	vmov	r6, r7, d0
 8003d00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003d04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003d08:	ed8d 1b00 	vstr	d1, [sp]
 8003d0c:	da07      	bge.n	8003d1e <__kernel_cos+0x26>
 8003d0e:	ee10 0a10 	vmov	r0, s0
 8003d12:	4639      	mov	r1, r7
 8003d14:	f7fc feae 	bl	8000a74 <__aeabi_d2iz>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f000 8088 	beq.w	8003e2e <__kernel_cos+0x136>
 8003d1e:	4632      	mov	r2, r6
 8003d20:	463b      	mov	r3, r7
 8003d22:	4630      	mov	r0, r6
 8003d24:	4639      	mov	r1, r7
 8003d26:	f7fc fc0b 	bl	8000540 <__aeabi_dmul>
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <__kernel_cos+0x178>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	460d      	mov	r5, r1
 8003d32:	f7fc fc05 	bl	8000540 <__aeabi_dmul>
 8003d36:	a340      	add	r3, pc, #256	; (adr r3, 8003e38 <__kernel_cos+0x140>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	468b      	mov	fp, r1
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fbfc 	bl	8000540 <__aeabi_dmul>
 8003d48:	a33d      	add	r3, pc, #244	; (adr r3, 8003e40 <__kernel_cos+0x148>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fa41 	bl	80001d4 <__adddf3>
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	f7fc fbf3 	bl	8000540 <__aeabi_dmul>
 8003d5a:	a33b      	add	r3, pc, #236	; (adr r3, 8003e48 <__kernel_cos+0x150>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fa36 	bl	80001d0 <__aeabi_dsub>
 8003d64:	4622      	mov	r2, r4
 8003d66:	462b      	mov	r3, r5
 8003d68:	f7fc fbea 	bl	8000540 <__aeabi_dmul>
 8003d6c:	a338      	add	r3, pc, #224	; (adr r3, 8003e50 <__kernel_cos+0x158>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fa2f 	bl	80001d4 <__adddf3>
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	f7fc fbe1 	bl	8000540 <__aeabi_dmul>
 8003d7e:	a336      	add	r3, pc, #216	; (adr r3, 8003e58 <__kernel_cos+0x160>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fa24 	bl	80001d0 <__aeabi_dsub>
 8003d88:	4622      	mov	r2, r4
 8003d8a:	462b      	mov	r3, r5
 8003d8c:	f7fc fbd8 	bl	8000540 <__aeabi_dmul>
 8003d90:	a333      	add	r3, pc, #204	; (adr r3, 8003e60 <__kernel_cos+0x168>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f7fc fa1d 	bl	80001d4 <__adddf3>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	462b      	mov	r3, r5
 8003d9e:	f7fc fbcf 	bl	8000540 <__aeabi_dmul>
 8003da2:	4622      	mov	r2, r4
 8003da4:	462b      	mov	r3, r5
 8003da6:	f7fc fbcb 	bl	8000540 <__aeabi_dmul>
 8003daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dae:	4604      	mov	r4, r0
 8003db0:	460d      	mov	r5, r1
 8003db2:	4630      	mov	r0, r6
 8003db4:	4639      	mov	r1, r7
 8003db6:	f7fc fbc3 	bl	8000540 <__aeabi_dmul>
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7fc fa05 	bl	80001d0 <__aeabi_dsub>
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <__kernel_cos+0x17c>)
 8003dc8:	4598      	cmp	r8, r3
 8003dca:	4606      	mov	r6, r0
 8003dcc:	460f      	mov	r7, r1
 8003dce:	dc10      	bgt.n	8003df2 <__kernel_cos+0xfa>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4650      	mov	r0, sl
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	f7fc f9fa 	bl	80001d0 <__aeabi_dsub>
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4926      	ldr	r1, [pc, #152]	; (8003e78 <__kernel_cos+0x180>)
 8003de0:	4602      	mov	r2, r0
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7fc f9f4 	bl	80001d0 <__aeabi_dsub>
 8003de8:	ec41 0b10 	vmov	d0, r0, r1
 8003dec:	b003      	add	sp, #12
 8003dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <__kernel_cos+0x184>)
 8003df4:	4920      	ldr	r1, [pc, #128]	; (8003e78 <__kernel_cos+0x180>)
 8003df6:	4598      	cmp	r8, r3
 8003df8:	bfcc      	ite	gt
 8003dfa:	4d21      	ldrgt	r5, [pc, #132]	; (8003e80 <__kernel_cos+0x188>)
 8003dfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003e00:	2400      	movs	r4, #0
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7fc f9e2 	bl	80001d0 <__aeabi_dsub>
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4680      	mov	r8, r0
 8003e10:	4689      	mov	r9, r1
 8003e12:	462b      	mov	r3, r5
 8003e14:	4650      	mov	r0, sl
 8003e16:	4659      	mov	r1, fp
 8003e18:	f7fc f9da 	bl	80001d0 <__aeabi_dsub>
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	463b      	mov	r3, r7
 8003e20:	f7fc f9d6 	bl	80001d0 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4640      	mov	r0, r8
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	e7da      	b.n	8003de4 <__kernel_cos+0xec>
 8003e2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003e68 <__kernel_cos+0x170>
 8003e32:	e7db      	b.n	8003dec <__kernel_cos+0xf4>
 8003e34:	f3af 8000 	nop.w
 8003e38:	be8838d4 	.word	0xbe8838d4
 8003e3c:	bda8fae9 	.word	0xbda8fae9
 8003e40:	bdb4b1c4 	.word	0xbdb4b1c4
 8003e44:	3e21ee9e 	.word	0x3e21ee9e
 8003e48:	809c52ad 	.word	0x809c52ad
 8003e4c:	3e927e4f 	.word	0x3e927e4f
 8003e50:	19cb1590 	.word	0x19cb1590
 8003e54:	3efa01a0 	.word	0x3efa01a0
 8003e58:	16c15177 	.word	0x16c15177
 8003e5c:	3f56c16c 	.word	0x3f56c16c
 8003e60:	5555554c 	.word	0x5555554c
 8003e64:	3fa55555 	.word	0x3fa55555
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	3ff00000 	.word	0x3ff00000
 8003e70:	3fe00000 	.word	0x3fe00000
 8003e74:	3fd33332 	.word	0x3fd33332
 8003e78:	3ff00000 	.word	0x3ff00000
 8003e7c:	3fe90000 	.word	0x3fe90000
 8003e80:	3fd20000 	.word	0x3fd20000
 8003e84:	00000000 	.word	0x00000000

08003e88 <__kernel_sin>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	ed2d 8b04 	vpush	{d8-d9}
 8003e90:	eeb0 8a41 	vmov.f32	s16, s2
 8003e94:	eef0 8a61 	vmov.f32	s17, s3
 8003e98:	ec55 4b10 	vmov	r4, r5, d0
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003ea2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003ea6:	9001      	str	r0, [sp, #4]
 8003ea8:	da06      	bge.n	8003eb8 <__kernel_sin+0x30>
 8003eaa:	ee10 0a10 	vmov	r0, s0
 8003eae:	4629      	mov	r1, r5
 8003eb0:	f7fc fde0 	bl	8000a74 <__aeabi_d2iz>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d051      	beq.n	8003f5c <__kernel_sin+0xd4>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f7fc fb3e 	bl	8000540 <__aeabi_dmul>
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	468b      	mov	fp, r1
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc fb36 	bl	8000540 <__aeabi_dmul>
 8003ed4:	a341      	add	r3, pc, #260	; (adr r3, 8003fdc <__kernel_sin+0x154>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	4680      	mov	r8, r0
 8003edc:	4689      	mov	r9, r1
 8003ede:	4650      	mov	r0, sl
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	f7fc fb2d 	bl	8000540 <__aeabi_dmul>
 8003ee6:	a33f      	add	r3, pc, #252	; (adr r3, 8003fe4 <__kernel_sin+0x15c>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc f970 	bl	80001d0 <__aeabi_dsub>
 8003ef0:	4652      	mov	r2, sl
 8003ef2:	465b      	mov	r3, fp
 8003ef4:	f7fc fb24 	bl	8000540 <__aeabi_dmul>
 8003ef8:	a33c      	add	r3, pc, #240	; (adr r3, 8003fec <__kernel_sin+0x164>)
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	f7fc f969 	bl	80001d4 <__adddf3>
 8003f02:	4652      	mov	r2, sl
 8003f04:	465b      	mov	r3, fp
 8003f06:	f7fc fb1b 	bl	8000540 <__aeabi_dmul>
 8003f0a:	a33a      	add	r3, pc, #232	; (adr r3, 8003ff4 <__kernel_sin+0x16c>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f7fc f95e 	bl	80001d0 <__aeabi_dsub>
 8003f14:	4652      	mov	r2, sl
 8003f16:	465b      	mov	r3, fp
 8003f18:	f7fc fb12 	bl	8000540 <__aeabi_dmul>
 8003f1c:	a337      	add	r3, pc, #220	; (adr r3, 8003ffc <__kernel_sin+0x174>)
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f7fc f957 	bl	80001d4 <__adddf3>
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	4606      	mov	r6, r0
 8003f2a:	460f      	mov	r7, r1
 8003f2c:	b9eb      	cbnz	r3, 8003f6a <__kernel_sin+0xe2>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4650      	mov	r0, sl
 8003f34:	4659      	mov	r1, fp
 8003f36:	f7fc fb03 	bl	8000540 <__aeabi_dmul>
 8003f3a:	a325      	add	r3, pc, #148	; (adr r3, 8003fd0 <__kernel_sin+0x148>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f7fc f946 	bl	80001d0 <__aeabi_dsub>
 8003f44:	4642      	mov	r2, r8
 8003f46:	464b      	mov	r3, r9
 8003f48:	f7fc fafa 	bl	8000540 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	f7fc f93e 	bl	80001d4 <__adddf3>
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460d      	mov	r5, r1
 8003f5c:	ec45 4b10 	vmov	d0, r4, r5
 8003f60:	b003      	add	sp, #12
 8003f62:	ecbd 8b04 	vpop	{d8-d9}
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <__kernel_sin+0x150>)
 8003f6c:	ec51 0b18 	vmov	r0, r1, d8
 8003f70:	2200      	movs	r2, #0
 8003f72:	f7fc fae5 	bl	8000540 <__aeabi_dmul>
 8003f76:	4632      	mov	r2, r6
 8003f78:	ec41 0b19 	vmov	d9, r0, r1
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc fadd 	bl	8000540 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ec51 0b19 	vmov	r0, r1, d9
 8003f8e:	f7fc f91f 	bl	80001d0 <__aeabi_dsub>
 8003f92:	4652      	mov	r2, sl
 8003f94:	465b      	mov	r3, fp
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	ec53 2b18 	vmov	r2, r3, d8
 8003f9e:	f7fc f917 	bl	80001d0 <__aeabi_dsub>
 8003fa2:	a30b      	add	r3, pc, #44	; (adr r3, 8003fd0 <__kernel_sin+0x148>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	4606      	mov	r6, r0
 8003faa:	460f      	mov	r7, r1
 8003fac:	4640      	mov	r0, r8
 8003fae:	4649      	mov	r1, r9
 8003fb0:	f7fc fac6 	bl	8000540 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4630      	mov	r0, r6
 8003fba:	4639      	mov	r1, r7
 8003fbc:	f7fc f90a 	bl	80001d4 <__adddf3>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	e7c4      	b.n	8003f58 <__kernel_sin+0xd0>
 8003fce:	bf00      	nop
 8003fd0:	55555549 	.word	0x55555549
 8003fd4:	3fc55555 	.word	0x3fc55555
 8003fd8:	3fe00000 	.word	0x3fe00000
 8003fdc:	5acfd57c 	.word	0x5acfd57c
 8003fe0:	3de5d93a 	.word	0x3de5d93a
 8003fe4:	8a2b9ceb 	.word	0x8a2b9ceb
 8003fe8:	3e5ae5e6 	.word	0x3e5ae5e6
 8003fec:	57b1fe7d 	.word	0x57b1fe7d
 8003ff0:	3ec71de3 	.word	0x3ec71de3
 8003ff4:	19c161d5 	.word	0x19c161d5
 8003ff8:	3f2a01a0 	.word	0x3f2a01a0
 8003ffc:	1110f8a6 	.word	0x1110f8a6
 8004000:	3f811111 	.word	0x3f811111
 8004004:	00000000 	.word	0x00000000

08004008 <__ieee754_rem_pio2>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	ed2d 8b02 	vpush	{d8}
 8004010:	ec55 4b10 	vmov	r4, r5, d0
 8004014:	4bca      	ldr	r3, [pc, #808]	; (8004340 <__ieee754_rem_pio2+0x338>)
 8004016:	b08b      	sub	sp, #44	; 0x2c
 8004018:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800401c:	4598      	cmp	r8, r3
 800401e:	4682      	mov	sl, r0
 8004020:	9502      	str	r5, [sp, #8]
 8004022:	dc08      	bgt.n	8004036 <__ieee754_rem_pio2+0x2e>
 8004024:	2200      	movs	r2, #0
 8004026:	2300      	movs	r3, #0
 8004028:	ed80 0b00 	vstr	d0, [r0]
 800402c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004030:	f04f 0b00 	mov.w	fp, #0
 8004034:	e028      	b.n	8004088 <__ieee754_rem_pio2+0x80>
 8004036:	4bc3      	ldr	r3, [pc, #780]	; (8004344 <__ieee754_rem_pio2+0x33c>)
 8004038:	4598      	cmp	r8, r3
 800403a:	dc78      	bgt.n	800412e <__ieee754_rem_pio2+0x126>
 800403c:	9b02      	ldr	r3, [sp, #8]
 800403e:	4ec2      	ldr	r6, [pc, #776]	; (8004348 <__ieee754_rem_pio2+0x340>)
 8004040:	2b00      	cmp	r3, #0
 8004042:	ee10 0a10 	vmov	r0, s0
 8004046:	a3b0      	add	r3, pc, #704	; (adr r3, 8004308 <__ieee754_rem_pio2+0x300>)
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	4629      	mov	r1, r5
 800404e:	dd39      	ble.n	80040c4 <__ieee754_rem_pio2+0xbc>
 8004050:	f7fc f8be 	bl	80001d0 <__aeabi_dsub>
 8004054:	45b0      	cmp	r8, r6
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	d01b      	beq.n	8004094 <__ieee754_rem_pio2+0x8c>
 800405c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004310 <__ieee754_rem_pio2+0x308>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc f8b5 	bl	80001d0 <__aeabi_dsub>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	e9ca 2300 	strd	r2, r3, [sl]
 800406e:	4620      	mov	r0, r4
 8004070:	4629      	mov	r1, r5
 8004072:	f7fc f8ad 	bl	80001d0 <__aeabi_dsub>
 8004076:	a3a6      	add	r3, pc, #664	; (adr r3, 8004310 <__ieee754_rem_pio2+0x308>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc f8a8 	bl	80001d0 <__aeabi_dsub>
 8004080:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004084:	f04f 0b01 	mov.w	fp, #1
 8004088:	4658      	mov	r0, fp
 800408a:	b00b      	add	sp, #44	; 0x2c
 800408c:	ecbd 8b02 	vpop	{d8}
 8004090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004094:	a3a0      	add	r3, pc, #640	; (adr r3, 8004318 <__ieee754_rem_pio2+0x310>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f7fc f899 	bl	80001d0 <__aeabi_dsub>
 800409e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004320 <__ieee754_rem_pio2+0x318>)
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
 80040a8:	f7fc f892 	bl	80001d0 <__aeabi_dsub>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9ca 2300 	strd	r2, r3, [sl]
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f88a 	bl	80001d0 <__aeabi_dsub>
 80040bc:	a398      	add	r3, pc, #608	; (adr r3, 8004320 <__ieee754_rem_pio2+0x318>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	e7db      	b.n	800407c <__ieee754_rem_pio2+0x74>
 80040c4:	f7fc f886 	bl	80001d4 <__adddf3>
 80040c8:	45b0      	cmp	r8, r6
 80040ca:	4604      	mov	r4, r0
 80040cc:	460d      	mov	r5, r1
 80040ce:	d016      	beq.n	80040fe <__ieee754_rem_pio2+0xf6>
 80040d0:	a38f      	add	r3, pc, #572	; (adr r3, 8004310 <__ieee754_rem_pio2+0x308>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc f87d 	bl	80001d4 <__adddf3>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	e9ca 2300 	strd	r2, r3, [sl]
 80040e2:	4620      	mov	r0, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	f7fc f873 	bl	80001d0 <__aeabi_dsub>
 80040ea:	a389      	add	r3, pc, #548	; (adr r3, 8004310 <__ieee754_rem_pio2+0x308>)
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	f7fc f870 	bl	80001d4 <__adddf3>
 80040f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80040f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80040fc:	e7c4      	b.n	8004088 <__ieee754_rem_pio2+0x80>
 80040fe:	a386      	add	r3, pc, #536	; (adr r3, 8004318 <__ieee754_rem_pio2+0x310>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f7fc f866 	bl	80001d4 <__adddf3>
 8004108:	a385      	add	r3, pc, #532	; (adr r3, 8004320 <__ieee754_rem_pio2+0x318>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	4604      	mov	r4, r0
 8004110:	460d      	mov	r5, r1
 8004112:	f7fc f85f 	bl	80001d4 <__adddf3>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9ca 2300 	strd	r2, r3, [sl]
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	f7fc f855 	bl	80001d0 <__aeabi_dsub>
 8004126:	a37e      	add	r3, pc, #504	; (adr r3, 8004320 <__ieee754_rem_pio2+0x318>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	e7e0      	b.n	80040f0 <__ieee754_rem_pio2+0xe8>
 800412e:	4b87      	ldr	r3, [pc, #540]	; (800434c <__ieee754_rem_pio2+0x344>)
 8004130:	4598      	cmp	r8, r3
 8004132:	f300 80d8 	bgt.w	80042e6 <__ieee754_rem_pio2+0x2de>
 8004136:	f000 f96d 	bl	8004414 <fabs>
 800413a:	ec55 4b10 	vmov	r4, r5, d0
 800413e:	ee10 0a10 	vmov	r0, s0
 8004142:	a379      	add	r3, pc, #484	; (adr r3, 8004328 <__ieee754_rem_pio2+0x320>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc f9f9 	bl	8000540 <__aeabi_dmul>
 800414e:	4b80      	ldr	r3, [pc, #512]	; (8004350 <__ieee754_rem_pio2+0x348>)
 8004150:	2200      	movs	r2, #0
 8004152:	f7fc f83f 	bl	80001d4 <__adddf3>
 8004156:	f7fc fc8d 	bl	8000a74 <__aeabi_d2iz>
 800415a:	4683      	mov	fp, r0
 800415c:	f7fc f986 	bl	800046c <__aeabi_i2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	ec43 2b18 	vmov	d8, r2, r3
 8004168:	a367      	add	r3, pc, #412	; (adr r3, 8004308 <__ieee754_rem_pio2+0x300>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc f9e7 	bl	8000540 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc f829 	bl	80001d0 <__aeabi_dsub>
 800417e:	a364      	add	r3, pc, #400	; (adr r3, 8004310 <__ieee754_rem_pio2+0x308>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	4606      	mov	r6, r0
 8004186:	460f      	mov	r7, r1
 8004188:	ec51 0b18 	vmov	r0, r1, d8
 800418c:	f7fc f9d8 	bl	8000540 <__aeabi_dmul>
 8004190:	f1bb 0f1f 	cmp.w	fp, #31
 8004194:	4604      	mov	r4, r0
 8004196:	460d      	mov	r5, r1
 8004198:	dc0d      	bgt.n	80041b6 <__ieee754_rem_pio2+0x1ae>
 800419a:	4b6e      	ldr	r3, [pc, #440]	; (8004354 <__ieee754_rem_pio2+0x34c>)
 800419c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	4543      	cmp	r3, r8
 80041a6:	d006      	beq.n	80041b6 <__ieee754_rem_pio2+0x1ae>
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	4630      	mov	r0, r6
 80041ae:	4639      	mov	r1, r7
 80041b0:	f7fc f80e 	bl	80001d0 <__aeabi_dsub>
 80041b4:	e00e      	b.n	80041d4 <__ieee754_rem_pio2+0x1cc>
 80041b6:	462b      	mov	r3, r5
 80041b8:	4622      	mov	r2, r4
 80041ba:	4630      	mov	r0, r6
 80041bc:	4639      	mov	r1, r7
 80041be:	f7fc f807 	bl	80001d0 <__aeabi_dsub>
 80041c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	dc02      	bgt.n	80041da <__ieee754_rem_pio2+0x1d2>
 80041d4:	e9ca 0100 	strd	r0, r1, [sl]
 80041d8:	e039      	b.n	800424e <__ieee754_rem_pio2+0x246>
 80041da:	a34f      	add	r3, pc, #316	; (adr r3, 8004318 <__ieee754_rem_pio2+0x310>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	ec51 0b18 	vmov	r0, r1, d8
 80041e4:	f7fc f9ac 	bl	8000540 <__aeabi_dmul>
 80041e8:	4604      	mov	r4, r0
 80041ea:	460d      	mov	r5, r1
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fb ffec 	bl	80001d0 <__aeabi_dsub>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4680      	mov	r8, r0
 80041fe:	4689      	mov	r9, r1
 8004200:	4630      	mov	r0, r6
 8004202:	4639      	mov	r1, r7
 8004204:	f7fb ffe4 	bl	80001d0 <__aeabi_dsub>
 8004208:	4622      	mov	r2, r4
 800420a:	462b      	mov	r3, r5
 800420c:	f7fb ffe0 	bl	80001d0 <__aeabi_dsub>
 8004210:	a343      	add	r3, pc, #268	; (adr r3, 8004320 <__ieee754_rem_pio2+0x318>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	4604      	mov	r4, r0
 8004218:	460d      	mov	r5, r1
 800421a:	ec51 0b18 	vmov	r0, r1, d8
 800421e:	f7fc f98f 	bl	8000540 <__aeabi_dmul>
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f7fb ffd3 	bl	80001d0 <__aeabi_dsub>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4604      	mov	r4, r0
 8004230:	460d      	mov	r5, r1
 8004232:	4640      	mov	r0, r8
 8004234:	4649      	mov	r1, r9
 8004236:	f7fb ffcb 	bl	80001d0 <__aeabi_dsub>
 800423a:	9a03      	ldr	r2, [sp, #12]
 800423c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b31      	cmp	r3, #49	; 0x31
 8004244:	dc24      	bgt.n	8004290 <__ieee754_rem_pio2+0x288>
 8004246:	e9ca 0100 	strd	r0, r1, [sl]
 800424a:	4646      	mov	r6, r8
 800424c:	464f      	mov	r7, r9
 800424e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004252:	4630      	mov	r0, r6
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	4639      	mov	r1, r7
 800425a:	f7fb ffb9 	bl	80001d0 <__aeabi_dsub>
 800425e:	462b      	mov	r3, r5
 8004260:	4622      	mov	r2, r4
 8004262:	f7fb ffb5 	bl	80001d0 <__aeabi_dsub>
 8004266:	9b02      	ldr	r3, [sp, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800426e:	f6bf af0b 	bge.w	8004088 <__ieee754_rem_pio2+0x80>
 8004272:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004276:	f8ca 3004 	str.w	r3, [sl, #4]
 800427a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800427e:	f8ca 8000 	str.w	r8, [sl]
 8004282:	f8ca 0008 	str.w	r0, [sl, #8]
 8004286:	f8ca 300c 	str.w	r3, [sl, #12]
 800428a:	f1cb 0b00 	rsb	fp, fp, #0
 800428e:	e6fb      	b.n	8004088 <__ieee754_rem_pio2+0x80>
 8004290:	a327      	add	r3, pc, #156	; (adr r3, 8004330 <__ieee754_rem_pio2+0x328>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	ec51 0b18 	vmov	r0, r1, d8
 800429a:	f7fc f951 	bl	8000540 <__aeabi_dmul>
 800429e:	4604      	mov	r4, r0
 80042a0:	460d      	mov	r5, r1
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4640      	mov	r0, r8
 80042a8:	4649      	mov	r1, r9
 80042aa:	f7fb ff91 	bl	80001d0 <__aeabi_dsub>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4606      	mov	r6, r0
 80042b4:	460f      	mov	r7, r1
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	f7fb ff89 	bl	80001d0 <__aeabi_dsub>
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f7fb ff85 	bl	80001d0 <__aeabi_dsub>
 80042c6:	a31c      	add	r3, pc, #112	; (adr r3, 8004338 <__ieee754_rem_pio2+0x330>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	4604      	mov	r4, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	ec51 0b18 	vmov	r0, r1, d8
 80042d4:	f7fc f934 	bl	8000540 <__aeabi_dmul>
 80042d8:	4622      	mov	r2, r4
 80042da:	462b      	mov	r3, r5
 80042dc:	f7fb ff78 	bl	80001d0 <__aeabi_dsub>
 80042e0:	4604      	mov	r4, r0
 80042e2:	460d      	mov	r5, r1
 80042e4:	e760      	b.n	80041a8 <__ieee754_rem_pio2+0x1a0>
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <__ieee754_rem_pio2+0x350>)
 80042e8:	4598      	cmp	r8, r3
 80042ea:	dd37      	ble.n	800435c <__ieee754_rem_pio2+0x354>
 80042ec:	ee10 2a10 	vmov	r2, s0
 80042f0:	462b      	mov	r3, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	f7fb ff6b 	bl	80001d0 <__aeabi_dsub>
 80042fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80042fe:	e9ca 0100 	strd	r0, r1, [sl]
 8004302:	e695      	b.n	8004030 <__ieee754_rem_pio2+0x28>
 8004304:	f3af 8000 	nop.w
 8004308:	54400000 	.word	0x54400000
 800430c:	3ff921fb 	.word	0x3ff921fb
 8004310:	1a626331 	.word	0x1a626331
 8004314:	3dd0b461 	.word	0x3dd0b461
 8004318:	1a600000 	.word	0x1a600000
 800431c:	3dd0b461 	.word	0x3dd0b461
 8004320:	2e037073 	.word	0x2e037073
 8004324:	3ba3198a 	.word	0x3ba3198a
 8004328:	6dc9c883 	.word	0x6dc9c883
 800432c:	3fe45f30 	.word	0x3fe45f30
 8004330:	2e000000 	.word	0x2e000000
 8004334:	3ba3198a 	.word	0x3ba3198a
 8004338:	252049c1 	.word	0x252049c1
 800433c:	397b839a 	.word	0x397b839a
 8004340:	3fe921fb 	.word	0x3fe921fb
 8004344:	4002d97b 	.word	0x4002d97b
 8004348:	3ff921fb 	.word	0x3ff921fb
 800434c:	413921fb 	.word	0x413921fb
 8004350:	3fe00000 	.word	0x3fe00000
 8004354:	08004cf8 	.word	0x08004cf8
 8004358:	7fefffff 	.word	0x7fefffff
 800435c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004360:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004364:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004368:	4620      	mov	r0, r4
 800436a:	460d      	mov	r5, r1
 800436c:	f7fc fb82 	bl	8000a74 <__aeabi_d2iz>
 8004370:	f7fc f87c 	bl	800046c <__aeabi_i2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4620      	mov	r0, r4
 800437a:	4629      	mov	r1, r5
 800437c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004380:	f7fb ff26 	bl	80001d0 <__aeabi_dsub>
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <__ieee754_rem_pio2+0x404>)
 8004386:	2200      	movs	r2, #0
 8004388:	f7fc f8da 	bl	8000540 <__aeabi_dmul>
 800438c:	460d      	mov	r5, r1
 800438e:	4604      	mov	r4, r0
 8004390:	f7fc fb70 	bl	8000a74 <__aeabi_d2iz>
 8004394:	f7fc f86a 	bl	800046c <__aeabi_i2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80043a4:	f7fb ff14 	bl	80001d0 <__aeabi_dsub>
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <__ieee754_rem_pio2+0x404>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	f7fc f8c8 	bl	8000540 <__aeabi_dmul>
 80043b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80043b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80043b8:	2703      	movs	r7, #3
 80043ba:	2400      	movs	r4, #0
 80043bc:	2500      	movs	r5, #0
 80043be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	46b9      	mov	r9, r7
 80043c8:	3f01      	subs	r7, #1
 80043ca:	f7fc fb21 	bl	8000a10 <__aeabi_dcmpeq>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d1f5      	bne.n	80043be <__ieee754_rem_pio2+0x3b6>
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <__ieee754_rem_pio2+0x408>)
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2302      	movs	r3, #2
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	4632      	mov	r2, r6
 80043dc:	464b      	mov	r3, r9
 80043de:	4651      	mov	r1, sl
 80043e0:	a804      	add	r0, sp, #16
 80043e2:	f000 f821 	bl	8004428 <__kernel_rem_pio2>
 80043e6:	9b02      	ldr	r3, [sp, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	4683      	mov	fp, r0
 80043ec:	f6bf ae4c 	bge.w	8004088 <__ieee754_rem_pio2+0x80>
 80043f0:	e9da 2100 	ldrd	r2, r1, [sl]
 80043f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043f8:	e9ca 2300 	strd	r2, r3, [sl]
 80043fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004400:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004404:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004408:	e73f      	b.n	800428a <__ieee754_rem_pio2+0x282>
 800440a:	bf00      	nop
 800440c:	41700000 	.word	0x41700000
 8004410:	08004d78 	.word	0x08004d78

08004414 <fabs>:
 8004414:	ec51 0b10 	vmov	r0, r1, d0
 8004418:	ee10 2a10 	vmov	r2, s0
 800441c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004420:	ec43 2b10 	vmov	d0, r2, r3
 8004424:	4770      	bx	lr
	...

08004428 <__kernel_rem_pio2>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	ed2d 8b02 	vpush	{d8}
 8004430:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004434:	f112 0f14 	cmn.w	r2, #20
 8004438:	9306      	str	r3, [sp, #24]
 800443a:	9104      	str	r1, [sp, #16]
 800443c:	4bc2      	ldr	r3, [pc, #776]	; (8004748 <__kernel_rem_pio2+0x320>)
 800443e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004440:	9009      	str	r0, [sp, #36]	; 0x24
 8004442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	9b06      	ldr	r3, [sp, #24]
 800444a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800444e:	bfa8      	it	ge
 8004450:	1ed4      	subge	r4, r2, #3
 8004452:	9305      	str	r3, [sp, #20]
 8004454:	bfb2      	itee	lt
 8004456:	2400      	movlt	r4, #0
 8004458:	2318      	movge	r3, #24
 800445a:	fb94 f4f3 	sdivge	r4, r4, r3
 800445e:	f06f 0317 	mvn.w	r3, #23
 8004462:	fb04 3303 	mla	r3, r4, r3, r3
 8004466:	eb03 0a02 	add.w	sl, r3, r2
 800446a:	9b00      	ldr	r3, [sp, #0]
 800446c:	9a05      	ldr	r2, [sp, #20]
 800446e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004738 <__kernel_rem_pio2+0x310>
 8004472:	eb03 0802 	add.w	r8, r3, r2
 8004476:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004478:	1aa7      	subs	r7, r4, r2
 800447a:	ae20      	add	r6, sp, #128	; 0x80
 800447c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004480:	2500      	movs	r5, #0
 8004482:	4545      	cmp	r5, r8
 8004484:	dd13      	ble.n	80044ae <__kernel_rem_pio2+0x86>
 8004486:	9b06      	ldr	r3, [sp, #24]
 8004488:	aa20      	add	r2, sp, #128	; 0x80
 800448a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800448e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	9b00      	ldr	r3, [sp, #0]
 8004498:	4598      	cmp	r8, r3
 800449a:	dc31      	bgt.n	8004500 <__kernel_rem_pio2+0xd8>
 800449c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004738 <__kernel_rem_pio2+0x310>
 80044a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80044a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80044a8:	462f      	mov	r7, r5
 80044aa:	2600      	movs	r6, #0
 80044ac:	e01b      	b.n	80044e6 <__kernel_rem_pio2+0xbe>
 80044ae:	42ef      	cmn	r7, r5
 80044b0:	d407      	bmi.n	80044c2 <__kernel_rem_pio2+0x9a>
 80044b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80044b6:	f7fb ffd9 	bl	800046c <__aeabi_i2d>
 80044ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80044be:	3501      	adds	r5, #1
 80044c0:	e7df      	b.n	8004482 <__kernel_rem_pio2+0x5a>
 80044c2:	ec51 0b18 	vmov	r0, r1, d8
 80044c6:	e7f8      	b.n	80044ba <__kernel_rem_pio2+0x92>
 80044c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80044d0:	f7fc f836 	bl	8000540 <__aeabi_dmul>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044dc:	f7fb fe7a 	bl	80001d4 <__adddf3>
 80044e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044e4:	3601      	adds	r6, #1
 80044e6:	9b05      	ldr	r3, [sp, #20]
 80044e8:	429e      	cmp	r6, r3
 80044ea:	f1a7 0708 	sub.w	r7, r7, #8
 80044ee:	ddeb      	ble.n	80044c8 <__kernel_rem_pio2+0xa0>
 80044f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044f4:	f108 0801 	add.w	r8, r8, #1
 80044f8:	ecab 7b02 	vstmia	fp!, {d7}
 80044fc:	3508      	adds	r5, #8
 80044fe:	e7ca      	b.n	8004496 <__kernel_rem_pio2+0x6e>
 8004500:	9b00      	ldr	r3, [sp, #0]
 8004502:	aa0c      	add	r2, sp, #48	; 0x30
 8004504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004508:	930b      	str	r3, [sp, #44]	; 0x2c
 800450a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800450c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004510:	9c00      	ldr	r4, [sp, #0]
 8004512:	930a      	str	r3, [sp, #40]	; 0x28
 8004514:	00e3      	lsls	r3, r4, #3
 8004516:	9308      	str	r3, [sp, #32]
 8004518:	ab98      	add	r3, sp, #608	; 0x260
 800451a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800451e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004522:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004526:	ab70      	add	r3, sp, #448	; 0x1c0
 8004528:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800452c:	46c3      	mov	fp, r8
 800452e:	46a1      	mov	r9, r4
 8004530:	f1b9 0f00 	cmp.w	r9, #0
 8004534:	f1a5 0508 	sub.w	r5, r5, #8
 8004538:	dc77      	bgt.n	800462a <__kernel_rem_pio2+0x202>
 800453a:	ec47 6b10 	vmov	d0, r6, r7
 800453e:	4650      	mov	r0, sl
 8004540:	f000 fac2 	bl	8004ac8 <scalbn>
 8004544:	ec57 6b10 	vmov	r6, r7, d0
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800454e:	ee10 0a10 	vmov	r0, s0
 8004552:	4639      	mov	r1, r7
 8004554:	f7fb fff4 	bl	8000540 <__aeabi_dmul>
 8004558:	ec41 0b10 	vmov	d0, r0, r1
 800455c:	f000 fb34 	bl	8004bc8 <floor>
 8004560:	4b7a      	ldr	r3, [pc, #488]	; (800474c <__kernel_rem_pio2+0x324>)
 8004562:	ec51 0b10 	vmov	r0, r1, d0
 8004566:	2200      	movs	r2, #0
 8004568:	f7fb ffea 	bl	8000540 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fb fe2c 	bl	80001d0 <__aeabi_dsub>
 8004578:	460f      	mov	r7, r1
 800457a:	4606      	mov	r6, r0
 800457c:	f7fc fa7a 	bl	8000a74 <__aeabi_d2iz>
 8004580:	9002      	str	r0, [sp, #8]
 8004582:	f7fb ff73 	bl	800046c <__aeabi_i2d>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4630      	mov	r0, r6
 800458c:	4639      	mov	r1, r7
 800458e:	f7fb fe1f 	bl	80001d0 <__aeabi_dsub>
 8004592:	f1ba 0f00 	cmp.w	sl, #0
 8004596:	4606      	mov	r6, r0
 8004598:	460f      	mov	r7, r1
 800459a:	dd6d      	ble.n	8004678 <__kernel_rem_pio2+0x250>
 800459c:	1e61      	subs	r1, r4, #1
 800459e:	ab0c      	add	r3, sp, #48	; 0x30
 80045a0:	9d02      	ldr	r5, [sp, #8]
 80045a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80045a6:	f1ca 0018 	rsb	r0, sl, #24
 80045aa:	fa43 f200 	asr.w	r2, r3, r0
 80045ae:	4415      	add	r5, r2
 80045b0:	4082      	lsls	r2, r0
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	aa0c      	add	r2, sp, #48	; 0x30
 80045b6:	9502      	str	r5, [sp, #8]
 80045b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80045bc:	f1ca 0217 	rsb	r2, sl, #23
 80045c0:	fa43 fb02 	asr.w	fp, r3, r2
 80045c4:	f1bb 0f00 	cmp.w	fp, #0
 80045c8:	dd65      	ble.n	8004696 <__kernel_rem_pio2+0x26e>
 80045ca:	9b02      	ldr	r3, [sp, #8]
 80045cc:	2200      	movs	r2, #0
 80045ce:	3301      	adds	r3, #1
 80045d0:	9302      	str	r3, [sp, #8]
 80045d2:	4615      	mov	r5, r2
 80045d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80045d8:	4294      	cmp	r4, r2
 80045da:	f300 809f 	bgt.w	800471c <__kernel_rem_pio2+0x2f4>
 80045de:	f1ba 0f00 	cmp.w	sl, #0
 80045e2:	dd07      	ble.n	80045f4 <__kernel_rem_pio2+0x1cc>
 80045e4:	f1ba 0f01 	cmp.w	sl, #1
 80045e8:	f000 80c1 	beq.w	800476e <__kernel_rem_pio2+0x346>
 80045ec:	f1ba 0f02 	cmp.w	sl, #2
 80045f0:	f000 80c7 	beq.w	8004782 <__kernel_rem_pio2+0x35a>
 80045f4:	f1bb 0f02 	cmp.w	fp, #2
 80045f8:	d14d      	bne.n	8004696 <__kernel_rem_pio2+0x26e>
 80045fa:	4632      	mov	r2, r6
 80045fc:	463b      	mov	r3, r7
 80045fe:	4954      	ldr	r1, [pc, #336]	; (8004750 <__kernel_rem_pio2+0x328>)
 8004600:	2000      	movs	r0, #0
 8004602:	f7fb fde5 	bl	80001d0 <__aeabi_dsub>
 8004606:	4606      	mov	r6, r0
 8004608:	460f      	mov	r7, r1
 800460a:	2d00      	cmp	r5, #0
 800460c:	d043      	beq.n	8004696 <__kernel_rem_pio2+0x26e>
 800460e:	4650      	mov	r0, sl
 8004610:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004740 <__kernel_rem_pio2+0x318>
 8004614:	f000 fa58 	bl	8004ac8 <scalbn>
 8004618:	4630      	mov	r0, r6
 800461a:	4639      	mov	r1, r7
 800461c:	ec53 2b10 	vmov	r2, r3, d0
 8004620:	f7fb fdd6 	bl	80001d0 <__aeabi_dsub>
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	e035      	b.n	8004696 <__kernel_rem_pio2+0x26e>
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <__kernel_rem_pio2+0x32c>)
 800462c:	2200      	movs	r2, #0
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fb ff85 	bl	8000540 <__aeabi_dmul>
 8004636:	f7fc fa1d 	bl	8000a74 <__aeabi_d2iz>
 800463a:	f7fb ff17 	bl	800046c <__aeabi_i2d>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	ec43 2b18 	vmov	d8, r2, r3
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <__kernel_rem_pio2+0x330>)
 8004648:	2200      	movs	r2, #0
 800464a:	f7fb ff79 	bl	8000540 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fb fdbb 	bl	80001d0 <__aeabi_dsub>
 800465a:	f7fc fa0b 	bl	8000a74 <__aeabi_d2iz>
 800465e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004662:	f84b 0b04 	str.w	r0, [fp], #4
 8004666:	ec51 0b18 	vmov	r0, r1, d8
 800466a:	f7fb fdb3 	bl	80001d4 <__adddf3>
 800466e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004672:	4606      	mov	r6, r0
 8004674:	460f      	mov	r7, r1
 8004676:	e75b      	b.n	8004530 <__kernel_rem_pio2+0x108>
 8004678:	d106      	bne.n	8004688 <__kernel_rem_pio2+0x260>
 800467a:	1e63      	subs	r3, r4, #1
 800467c:	aa0c      	add	r2, sp, #48	; 0x30
 800467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004682:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004686:	e79d      	b.n	80045c4 <__kernel_rem_pio2+0x19c>
 8004688:	4b34      	ldr	r3, [pc, #208]	; (800475c <__kernel_rem_pio2+0x334>)
 800468a:	2200      	movs	r2, #0
 800468c:	f7fc f9de 	bl	8000a4c <__aeabi_dcmpge>
 8004690:	2800      	cmp	r0, #0
 8004692:	d140      	bne.n	8004716 <__kernel_rem_pio2+0x2ee>
 8004694:	4683      	mov	fp, r0
 8004696:	2200      	movs	r2, #0
 8004698:	2300      	movs	r3, #0
 800469a:	4630      	mov	r0, r6
 800469c:	4639      	mov	r1, r7
 800469e:	f7fc f9b7 	bl	8000a10 <__aeabi_dcmpeq>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f000 80c1 	beq.w	800482a <__kernel_rem_pio2+0x402>
 80046a8:	1e65      	subs	r5, r4, #1
 80046aa:	462b      	mov	r3, r5
 80046ac:	2200      	movs	r2, #0
 80046ae:	9900      	ldr	r1, [sp, #0]
 80046b0:	428b      	cmp	r3, r1
 80046b2:	da6d      	bge.n	8004790 <__kernel_rem_pio2+0x368>
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	f000 808a 	beq.w	80047ce <__kernel_rem_pio2+0x3a6>
 80046ba:	ab0c      	add	r3, sp, #48	; 0x30
 80046bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80046c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80ae 	beq.w	8004826 <__kernel_rem_pio2+0x3fe>
 80046ca:	4650      	mov	r0, sl
 80046cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004740 <__kernel_rem_pio2+0x318>
 80046d0:	f000 f9fa 	bl	8004ac8 <scalbn>
 80046d4:	1c6b      	adds	r3, r5, #1
 80046d6:	00da      	lsls	r2, r3, #3
 80046d8:	9205      	str	r2, [sp, #20]
 80046da:	ec57 6b10 	vmov	r6, r7, d0
 80046de:	aa70      	add	r2, sp, #448	; 0x1c0
 80046e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004754 <__kernel_rem_pio2+0x32c>
 80046e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80046e8:	462c      	mov	r4, r5
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	f280 80d4 	bge.w	800489c <__kernel_rem_pio2+0x474>
 80046f4:	462c      	mov	r4, r5
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	f2c0 8102 	blt.w	8004900 <__kernel_rem_pio2+0x4d8>
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <__kernel_rem_pio2+0x338>)
 80046fe:	461e      	mov	r6, r3
 8004700:	ab70      	add	r3, sp, #448	; 0x1c0
 8004702:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004706:	1b2b      	subs	r3, r5, r4
 8004708:	f04f 0900 	mov.w	r9, #0
 800470c:	f04f 0a00 	mov.w	sl, #0
 8004710:	2700      	movs	r7, #0
 8004712:	9306      	str	r3, [sp, #24]
 8004714:	e0e6      	b.n	80048e4 <__kernel_rem_pio2+0x4bc>
 8004716:	f04f 0b02 	mov.w	fp, #2
 800471a:	e756      	b.n	80045ca <__kernel_rem_pio2+0x1a2>
 800471c:	f8d8 3000 	ldr.w	r3, [r8]
 8004720:	bb05      	cbnz	r5, 8004764 <__kernel_rem_pio2+0x33c>
 8004722:	b123      	cbz	r3, 800472e <__kernel_rem_pio2+0x306>
 8004724:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004728:	f8c8 3000 	str.w	r3, [r8]
 800472c:	2301      	movs	r3, #1
 800472e:	3201      	adds	r2, #1
 8004730:	f108 0804 	add.w	r8, r8, #4
 8004734:	461d      	mov	r5, r3
 8004736:	e74f      	b.n	80045d8 <__kernel_rem_pio2+0x1b0>
	...
 8004744:	3ff00000 	.word	0x3ff00000
 8004748:	08004ec0 	.word	0x08004ec0
 800474c:	40200000 	.word	0x40200000
 8004750:	3ff00000 	.word	0x3ff00000
 8004754:	3e700000 	.word	0x3e700000
 8004758:	41700000 	.word	0x41700000
 800475c:	3fe00000 	.word	0x3fe00000
 8004760:	08004e80 	.word	0x08004e80
 8004764:	1acb      	subs	r3, r1, r3
 8004766:	f8c8 3000 	str.w	r3, [r8]
 800476a:	462b      	mov	r3, r5
 800476c:	e7df      	b.n	800472e <__kernel_rem_pio2+0x306>
 800476e:	1e62      	subs	r2, r4, #1
 8004770:	ab0c      	add	r3, sp, #48	; 0x30
 8004772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004776:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800477a:	a90c      	add	r1, sp, #48	; 0x30
 800477c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004780:	e738      	b.n	80045f4 <__kernel_rem_pio2+0x1cc>
 8004782:	1e62      	subs	r2, r4, #1
 8004784:	ab0c      	add	r3, sp, #48	; 0x30
 8004786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800478e:	e7f4      	b.n	800477a <__kernel_rem_pio2+0x352>
 8004790:	a90c      	add	r1, sp, #48	; 0x30
 8004792:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004796:	3b01      	subs	r3, #1
 8004798:	430a      	orrs	r2, r1
 800479a:	e788      	b.n	80046ae <__kernel_rem_pio2+0x286>
 800479c:	3301      	adds	r3, #1
 800479e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80047a2:	2900      	cmp	r1, #0
 80047a4:	d0fa      	beq.n	800479c <__kernel_rem_pio2+0x374>
 80047a6:	9a08      	ldr	r2, [sp, #32]
 80047a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80047ac:	446a      	add	r2, sp
 80047ae:	3a98      	subs	r2, #152	; 0x98
 80047b0:	9208      	str	r2, [sp, #32]
 80047b2:	9a06      	ldr	r2, [sp, #24]
 80047b4:	a920      	add	r1, sp, #128	; 0x80
 80047b6:	18a2      	adds	r2, r4, r2
 80047b8:	18e3      	adds	r3, r4, r3
 80047ba:	f104 0801 	add.w	r8, r4, #1
 80047be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80047c2:	9302      	str	r3, [sp, #8]
 80047c4:	9b02      	ldr	r3, [sp, #8]
 80047c6:	4543      	cmp	r3, r8
 80047c8:	da04      	bge.n	80047d4 <__kernel_rem_pio2+0x3ac>
 80047ca:	461c      	mov	r4, r3
 80047cc:	e6a2      	b.n	8004514 <__kernel_rem_pio2+0xec>
 80047ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047d0:	2301      	movs	r3, #1
 80047d2:	e7e4      	b.n	800479e <__kernel_rem_pio2+0x376>
 80047d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80047da:	f7fb fe47 	bl	800046c <__aeabi_i2d>
 80047de:	e8e5 0102 	strd	r0, r1, [r5], #8
 80047e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e4:	46ab      	mov	fp, r5
 80047e6:	461c      	mov	r4, r3
 80047e8:	f04f 0900 	mov.w	r9, #0
 80047ec:	2600      	movs	r6, #0
 80047ee:	2700      	movs	r7, #0
 80047f0:	9b05      	ldr	r3, [sp, #20]
 80047f2:	4599      	cmp	r9, r3
 80047f4:	dd06      	ble.n	8004804 <__kernel_rem_pio2+0x3dc>
 80047f6:	9b08      	ldr	r3, [sp, #32]
 80047f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80047fc:	f108 0801 	add.w	r8, r8, #1
 8004800:	9308      	str	r3, [sp, #32]
 8004802:	e7df      	b.n	80047c4 <__kernel_rem_pio2+0x39c>
 8004804:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004808:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800480c:	f7fb fe98 	bl	8000540 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4630      	mov	r0, r6
 8004816:	4639      	mov	r1, r7
 8004818:	f7fb fcdc 	bl	80001d4 <__adddf3>
 800481c:	f109 0901 	add.w	r9, r9, #1
 8004820:	4606      	mov	r6, r0
 8004822:	460f      	mov	r7, r1
 8004824:	e7e4      	b.n	80047f0 <__kernel_rem_pio2+0x3c8>
 8004826:	3d01      	subs	r5, #1
 8004828:	e747      	b.n	80046ba <__kernel_rem_pio2+0x292>
 800482a:	ec47 6b10 	vmov	d0, r6, r7
 800482e:	f1ca 0000 	rsb	r0, sl, #0
 8004832:	f000 f949 	bl	8004ac8 <scalbn>
 8004836:	ec57 6b10 	vmov	r6, r7, d0
 800483a:	4ba0      	ldr	r3, [pc, #640]	; (8004abc <__kernel_rem_pio2+0x694>)
 800483c:	ee10 0a10 	vmov	r0, s0
 8004840:	2200      	movs	r2, #0
 8004842:	4639      	mov	r1, r7
 8004844:	f7fc f902 	bl	8000a4c <__aeabi_dcmpge>
 8004848:	b1f8      	cbz	r0, 800488a <__kernel_rem_pio2+0x462>
 800484a:	4b9d      	ldr	r3, [pc, #628]	; (8004ac0 <__kernel_rem_pio2+0x698>)
 800484c:	2200      	movs	r2, #0
 800484e:	4630      	mov	r0, r6
 8004850:	4639      	mov	r1, r7
 8004852:	f7fb fe75 	bl	8000540 <__aeabi_dmul>
 8004856:	f7fc f90d 	bl	8000a74 <__aeabi_d2iz>
 800485a:	4680      	mov	r8, r0
 800485c:	f7fb fe06 	bl	800046c <__aeabi_i2d>
 8004860:	4b96      	ldr	r3, [pc, #600]	; (8004abc <__kernel_rem_pio2+0x694>)
 8004862:	2200      	movs	r2, #0
 8004864:	f7fb fe6c 	bl	8000540 <__aeabi_dmul>
 8004868:	460b      	mov	r3, r1
 800486a:	4602      	mov	r2, r0
 800486c:	4639      	mov	r1, r7
 800486e:	4630      	mov	r0, r6
 8004870:	f7fb fcae 	bl	80001d0 <__aeabi_dsub>
 8004874:	f7fc f8fe 	bl	8000a74 <__aeabi_d2iz>
 8004878:	1c65      	adds	r5, r4, #1
 800487a:	ab0c      	add	r3, sp, #48	; 0x30
 800487c:	f10a 0a18 	add.w	sl, sl, #24
 8004880:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004884:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004888:	e71f      	b.n	80046ca <__kernel_rem_pio2+0x2a2>
 800488a:	4630      	mov	r0, r6
 800488c:	4639      	mov	r1, r7
 800488e:	f7fc f8f1 	bl	8000a74 <__aeabi_d2iz>
 8004892:	ab0c      	add	r3, sp, #48	; 0x30
 8004894:	4625      	mov	r5, r4
 8004896:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800489a:	e716      	b.n	80046ca <__kernel_rem_pio2+0x2a2>
 800489c:	ab0c      	add	r3, sp, #48	; 0x30
 800489e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80048a2:	f7fb fde3 	bl	800046c <__aeabi_i2d>
 80048a6:	4632      	mov	r2, r6
 80048a8:	463b      	mov	r3, r7
 80048aa:	f7fb fe49 	bl	8000540 <__aeabi_dmul>
 80048ae:	4642      	mov	r2, r8
 80048b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80048b4:	464b      	mov	r3, r9
 80048b6:	4630      	mov	r0, r6
 80048b8:	4639      	mov	r1, r7
 80048ba:	f7fb fe41 	bl	8000540 <__aeabi_dmul>
 80048be:	3c01      	subs	r4, #1
 80048c0:	4606      	mov	r6, r0
 80048c2:	460f      	mov	r7, r1
 80048c4:	e713      	b.n	80046ee <__kernel_rem_pio2+0x2c6>
 80048c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80048ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80048ce:	f7fb fe37 	bl	8000540 <__aeabi_dmul>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4648      	mov	r0, r9
 80048d8:	4651      	mov	r1, sl
 80048da:	f7fb fc7b 	bl	80001d4 <__adddf3>
 80048de:	3701      	adds	r7, #1
 80048e0:	4681      	mov	r9, r0
 80048e2:	468a      	mov	sl, r1
 80048e4:	9b00      	ldr	r3, [sp, #0]
 80048e6:	429f      	cmp	r7, r3
 80048e8:	dc02      	bgt.n	80048f0 <__kernel_rem_pio2+0x4c8>
 80048ea:	9b06      	ldr	r3, [sp, #24]
 80048ec:	429f      	cmp	r7, r3
 80048ee:	ddea      	ble.n	80048c6 <__kernel_rem_pio2+0x49e>
 80048f0:	9a06      	ldr	r2, [sp, #24]
 80048f2:	ab48      	add	r3, sp, #288	; 0x120
 80048f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80048f8:	e9c6 9a00 	strd	r9, sl, [r6]
 80048fc:	3c01      	subs	r4, #1
 80048fe:	e6fa      	b.n	80046f6 <__kernel_rem_pio2+0x2ce>
 8004900:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004902:	2b02      	cmp	r3, #2
 8004904:	dc0b      	bgt.n	800491e <__kernel_rem_pio2+0x4f6>
 8004906:	2b00      	cmp	r3, #0
 8004908:	dc39      	bgt.n	800497e <__kernel_rem_pio2+0x556>
 800490a:	d05d      	beq.n	80049c8 <__kernel_rem_pio2+0x5a0>
 800490c:	9b02      	ldr	r3, [sp, #8]
 800490e:	f003 0007 	and.w	r0, r3, #7
 8004912:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004916:	ecbd 8b02 	vpop	{d8}
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004920:	2b03      	cmp	r3, #3
 8004922:	d1f3      	bne.n	800490c <__kernel_rem_pio2+0x4e4>
 8004924:	9b05      	ldr	r3, [sp, #20]
 8004926:	9500      	str	r5, [sp, #0]
 8004928:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800492c:	eb0d 0403 	add.w	r4, sp, r3
 8004930:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004934:	46a2      	mov	sl, r4
 8004936:	9b00      	ldr	r3, [sp, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f1aa 0a08 	sub.w	sl, sl, #8
 800493e:	dc69      	bgt.n	8004a14 <__kernel_rem_pio2+0x5ec>
 8004940:	46aa      	mov	sl, r5
 8004942:	f1ba 0f01 	cmp.w	sl, #1
 8004946:	f1a4 0408 	sub.w	r4, r4, #8
 800494a:	f300 8083 	bgt.w	8004a54 <__kernel_rem_pio2+0x62c>
 800494e:	9c05      	ldr	r4, [sp, #20]
 8004950:	ab48      	add	r3, sp, #288	; 0x120
 8004952:	441c      	add	r4, r3
 8004954:	2000      	movs	r0, #0
 8004956:	2100      	movs	r1, #0
 8004958:	2d01      	cmp	r5, #1
 800495a:	f300 809a 	bgt.w	8004a92 <__kernel_rem_pio2+0x66a>
 800495e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004962:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004966:	f1bb 0f00 	cmp.w	fp, #0
 800496a:	f040 8098 	bne.w	8004a9e <__kernel_rem_pio2+0x676>
 800496e:	9b04      	ldr	r3, [sp, #16]
 8004970:	e9c3 7800 	strd	r7, r8, [r3]
 8004974:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004978:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800497c:	e7c6      	b.n	800490c <__kernel_rem_pio2+0x4e4>
 800497e:	9e05      	ldr	r6, [sp, #20]
 8004980:	ab48      	add	r3, sp, #288	; 0x120
 8004982:	441e      	add	r6, r3
 8004984:	462c      	mov	r4, r5
 8004986:	2000      	movs	r0, #0
 8004988:	2100      	movs	r1, #0
 800498a:	2c00      	cmp	r4, #0
 800498c:	da33      	bge.n	80049f6 <__kernel_rem_pio2+0x5ce>
 800498e:	f1bb 0f00 	cmp.w	fp, #0
 8004992:	d036      	beq.n	8004a02 <__kernel_rem_pio2+0x5da>
 8004994:	4602      	mov	r2, r0
 8004996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800499a:	9c04      	ldr	r4, [sp, #16]
 800499c:	e9c4 2300 	strd	r2, r3, [r4]
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80049a8:	f7fb fc12 	bl	80001d0 <__aeabi_dsub>
 80049ac:	ae4a      	add	r6, sp, #296	; 0x128
 80049ae:	2401      	movs	r4, #1
 80049b0:	42a5      	cmp	r5, r4
 80049b2:	da29      	bge.n	8004a08 <__kernel_rem_pio2+0x5e0>
 80049b4:	f1bb 0f00 	cmp.w	fp, #0
 80049b8:	d002      	beq.n	80049c0 <__kernel_rem_pio2+0x598>
 80049ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049be:	4619      	mov	r1, r3
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80049c6:	e7a1      	b.n	800490c <__kernel_rem_pio2+0x4e4>
 80049c8:	9c05      	ldr	r4, [sp, #20]
 80049ca:	ab48      	add	r3, sp, #288	; 0x120
 80049cc:	441c      	add	r4, r3
 80049ce:	2000      	movs	r0, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	da09      	bge.n	80049ea <__kernel_rem_pio2+0x5c2>
 80049d6:	f1bb 0f00 	cmp.w	fp, #0
 80049da:	d002      	beq.n	80049e2 <__kernel_rem_pio2+0x5ba>
 80049dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049e0:	4619      	mov	r1, r3
 80049e2:	9b04      	ldr	r3, [sp, #16]
 80049e4:	e9c3 0100 	strd	r0, r1, [r3]
 80049e8:	e790      	b.n	800490c <__kernel_rem_pio2+0x4e4>
 80049ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80049ee:	f7fb fbf1 	bl	80001d4 <__adddf3>
 80049f2:	3d01      	subs	r5, #1
 80049f4:	e7ed      	b.n	80049d2 <__kernel_rem_pio2+0x5aa>
 80049f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80049fa:	f7fb fbeb 	bl	80001d4 <__adddf3>
 80049fe:	3c01      	subs	r4, #1
 8004a00:	e7c3      	b.n	800498a <__kernel_rem_pio2+0x562>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	e7c8      	b.n	800499a <__kernel_rem_pio2+0x572>
 8004a08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004a0c:	f7fb fbe2 	bl	80001d4 <__adddf3>
 8004a10:	3401      	adds	r4, #1
 8004a12:	e7cd      	b.n	80049b0 <__kernel_rem_pio2+0x588>
 8004a14:	e9da 8900 	ldrd	r8, r9, [sl]
 8004a18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004a1c:	9b00      	ldr	r3, [sp, #0]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4632      	mov	r2, r6
 8004a24:	463b      	mov	r3, r7
 8004a26:	4640      	mov	r0, r8
 8004a28:	4649      	mov	r1, r9
 8004a2a:	f7fb fbd3 	bl	80001d4 <__adddf3>
 8004a2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4640      	mov	r0, r8
 8004a38:	4649      	mov	r1, r9
 8004a3a:	f7fb fbc9 	bl	80001d0 <__aeabi_dsub>
 8004a3e:	4632      	mov	r2, r6
 8004a40:	463b      	mov	r3, r7
 8004a42:	f7fb fbc7 	bl	80001d4 <__adddf3>
 8004a46:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004a4e:	ed8a 7b00 	vstr	d7, [sl]
 8004a52:	e770      	b.n	8004936 <__kernel_rem_pio2+0x50e>
 8004a54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004a58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4632      	mov	r2, r6
 8004a60:	463b      	mov	r3, r7
 8004a62:	4649      	mov	r1, r9
 8004a64:	f7fb fbb6 	bl	80001d4 <__adddf3>
 8004a68:	e9cd 0100 	strd	r0, r1, [sp]
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4640      	mov	r0, r8
 8004a72:	4649      	mov	r1, r9
 8004a74:	f7fb fbac 	bl	80001d0 <__aeabi_dsub>
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	f7fb fbaa 	bl	80001d4 <__adddf3>
 8004a80:	ed9d 7b00 	vldr	d7, [sp]
 8004a84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a88:	ed84 7b00 	vstr	d7, [r4]
 8004a8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a90:	e757      	b.n	8004942 <__kernel_rem_pio2+0x51a>
 8004a92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004a96:	f7fb fb9d 	bl	80001d4 <__adddf3>
 8004a9a:	3d01      	subs	r5, #1
 8004a9c:	e75c      	b.n	8004958 <__kernel_rem_pio2+0x530>
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	9a04      	ldr	r2, [sp, #16]
 8004aa2:	601f      	str	r7, [r3, #0]
 8004aa4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004aa8:	605c      	str	r4, [r3, #4]
 8004aaa:	609d      	str	r5, [r3, #8]
 8004aac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ab0:	60d3      	str	r3, [r2, #12]
 8004ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ab6:	6110      	str	r0, [r2, #16]
 8004ab8:	6153      	str	r3, [r2, #20]
 8004aba:	e727      	b.n	800490c <__kernel_rem_pio2+0x4e4>
 8004abc:	41700000 	.word	0x41700000
 8004ac0:	3e700000 	.word	0x3e700000
 8004ac4:	00000000 	.word	0x00000000

08004ac8 <scalbn>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	ec55 4b10 	vmov	r4, r5, d0
 8004ace:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	b999      	cbnz	r1, 8004b00 <scalbn+0x38>
 8004ad8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004adc:	4323      	orrs	r3, r4
 8004ade:	d03f      	beq.n	8004b60 <scalbn+0x98>
 8004ae0:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <scalbn+0xf0>)
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	ee10 0a10 	vmov	r0, s0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f7fb fd29 	bl	8000540 <__aeabi_dmul>
 8004aee:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <scalbn+0xf4>)
 8004af0:	429e      	cmp	r6, r3
 8004af2:	4604      	mov	r4, r0
 8004af4:	460d      	mov	r5, r1
 8004af6:	da10      	bge.n	8004b1a <scalbn+0x52>
 8004af8:	a327      	add	r3, pc, #156	; (adr r3, 8004b98 <scalbn+0xd0>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	e01f      	b.n	8004b40 <scalbn+0x78>
 8004b00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b04:	4291      	cmp	r1, r2
 8004b06:	d10c      	bne.n	8004b22 <scalbn+0x5a>
 8004b08:	ee10 2a10 	vmov	r2, s0
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb fb60 	bl	80001d4 <__adddf3>
 8004b14:	4604      	mov	r4, r0
 8004b16:	460d      	mov	r5, r1
 8004b18:	e022      	b.n	8004b60 <scalbn+0x98>
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004b20:	3936      	subs	r1, #54	; 0x36
 8004b22:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004b26:	4296      	cmp	r6, r2
 8004b28:	dd0d      	ble.n	8004b46 <scalbn+0x7e>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	a11c      	add	r1, pc, #112	; (adr r1, 8004ba0 <scalbn+0xd8>)
 8004b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b32:	da02      	bge.n	8004b3a <scalbn+0x72>
 8004b34:	a11c      	add	r1, pc, #112	; (adr r1, 8004ba8 <scalbn+0xe0>)
 8004b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b3a:	a319      	add	r3, pc, #100	; (adr r3, 8004ba0 <scalbn+0xd8>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fcfe 	bl	8000540 <__aeabi_dmul>
 8004b44:	e7e6      	b.n	8004b14 <scalbn+0x4c>
 8004b46:	1872      	adds	r2, r6, r1
 8004b48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b4c:	428a      	cmp	r2, r1
 8004b4e:	dcec      	bgt.n	8004b2a <scalbn+0x62>
 8004b50:	2a00      	cmp	r2, #0
 8004b52:	dd08      	ble.n	8004b66 <scalbn+0x9e>
 8004b54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b60:	ec45 4b10 	vmov	d0, r4, r5
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b6a:	da08      	bge.n	8004b7e <scalbn+0xb6>
 8004b6c:	2d00      	cmp	r5, #0
 8004b6e:	a10a      	add	r1, pc, #40	; (adr r1, 8004b98 <scalbn+0xd0>)
 8004b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b74:	dac0      	bge.n	8004af8 <scalbn+0x30>
 8004b76:	a10e      	add	r1, pc, #56	; (adr r1, 8004bb0 <scalbn+0xe8>)
 8004b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b7c:	e7bc      	b.n	8004af8 <scalbn+0x30>
 8004b7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b82:	3236      	adds	r2, #54	; 0x36
 8004b84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <scalbn+0xf8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	e7d5      	b.n	8004b40 <scalbn+0x78>
 8004b94:	f3af 8000 	nop.w
 8004b98:	c2f8f359 	.word	0xc2f8f359
 8004b9c:	01a56e1f 	.word	0x01a56e1f
 8004ba0:	8800759c 	.word	0x8800759c
 8004ba4:	7e37e43c 	.word	0x7e37e43c
 8004ba8:	8800759c 	.word	0x8800759c
 8004bac:	fe37e43c 	.word	0xfe37e43c
 8004bb0:	c2f8f359 	.word	0xc2f8f359
 8004bb4:	81a56e1f 	.word	0x81a56e1f
 8004bb8:	43500000 	.word	0x43500000
 8004bbc:	ffff3cb0 	.word	0xffff3cb0
 8004bc0:	3c900000 	.word	0x3c900000
 8004bc4:	00000000 	.word	0x00000000

08004bc8 <floor>:
 8004bc8:	ec51 0b10 	vmov	r0, r1, d0
 8004bcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004bd8:	2e13      	cmp	r6, #19
 8004bda:	ee10 5a10 	vmov	r5, s0
 8004bde:	ee10 8a10 	vmov	r8, s0
 8004be2:	460c      	mov	r4, r1
 8004be4:	dc31      	bgt.n	8004c4a <floor+0x82>
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	da14      	bge.n	8004c14 <floor+0x4c>
 8004bea:	a333      	add	r3, pc, #204	; (adr r3, 8004cb8 <floor+0xf0>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb faf0 	bl	80001d4 <__adddf3>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fb ff32 	bl	8000a60 <__aeabi_dcmpgt>
 8004bfc:	b138      	cbz	r0, 8004c0e <floor+0x46>
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	da53      	bge.n	8004caa <floor+0xe2>
 8004c02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004c06:	4325      	orrs	r5, r4
 8004c08:	d052      	beq.n	8004cb0 <floor+0xe8>
 8004c0a:	4c2d      	ldr	r4, [pc, #180]	; (8004cc0 <floor+0xf8>)
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	e024      	b.n	8004c5e <floor+0x96>
 8004c14:	4f2b      	ldr	r7, [pc, #172]	; (8004cc4 <floor+0xfc>)
 8004c16:	4137      	asrs	r7, r6
 8004c18:	ea01 0307 	and.w	r3, r1, r7
 8004c1c:	4303      	orrs	r3, r0
 8004c1e:	d01e      	beq.n	8004c5e <floor+0x96>
 8004c20:	a325      	add	r3, pc, #148	; (adr r3, 8004cb8 <floor+0xf0>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb fad5 	bl	80001d4 <__adddf3>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f7fb ff17 	bl	8000a60 <__aeabi_dcmpgt>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d0eb      	beq.n	8004c0e <floor+0x46>
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	bfbe      	ittt	lt
 8004c3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004c3e:	4133      	asrlt	r3, r6
 8004c40:	18e4      	addlt	r4, r4, r3
 8004c42:	ea24 0407 	bic.w	r4, r4, r7
 8004c46:	2500      	movs	r5, #0
 8004c48:	e7e1      	b.n	8004c0e <floor+0x46>
 8004c4a:	2e33      	cmp	r6, #51	; 0x33
 8004c4c:	dd0b      	ble.n	8004c66 <floor+0x9e>
 8004c4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004c52:	d104      	bne.n	8004c5e <floor+0x96>
 8004c54:	ee10 2a10 	vmov	r2, s0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	f7fb fabb 	bl	80001d4 <__adddf3>
 8004c5e:	ec41 0b10 	vmov	d0, r0, r1
 8004c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004c6a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c6e:	40df      	lsrs	r7, r3
 8004c70:	4238      	tst	r0, r7
 8004c72:	d0f4      	beq.n	8004c5e <floor+0x96>
 8004c74:	a310      	add	r3, pc, #64	; (adr r3, 8004cb8 <floor+0xf0>)
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f7fb faab 	bl	80001d4 <__adddf3>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2300      	movs	r3, #0
 8004c82:	f7fb feed 	bl	8000a60 <__aeabi_dcmpgt>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d0c1      	beq.n	8004c0e <floor+0x46>
 8004c8a:	2c00      	cmp	r4, #0
 8004c8c:	da0a      	bge.n	8004ca4 <floor+0xdc>
 8004c8e:	2e14      	cmp	r6, #20
 8004c90:	d101      	bne.n	8004c96 <floor+0xce>
 8004c92:	3401      	adds	r4, #1
 8004c94:	e006      	b.n	8004ca4 <floor+0xdc>
 8004c96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	40b3      	lsls	r3, r6
 8004c9e:	441d      	add	r5, r3
 8004ca0:	45a8      	cmp	r8, r5
 8004ca2:	d8f6      	bhi.n	8004c92 <floor+0xca>
 8004ca4:	ea25 0507 	bic.w	r5, r5, r7
 8004ca8:	e7b1      	b.n	8004c0e <floor+0x46>
 8004caa:	2500      	movs	r5, #0
 8004cac:	462c      	mov	r4, r5
 8004cae:	e7ae      	b.n	8004c0e <floor+0x46>
 8004cb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004cb4:	e7ab      	b.n	8004c0e <floor+0x46>
 8004cb6:	bf00      	nop
 8004cb8:	8800759c 	.word	0x8800759c
 8004cbc:	7e37e43c 	.word	0x7e37e43c
 8004cc0:	bff00000 	.word	0xbff00000
 8004cc4:	000fffff 	.word	0x000fffff

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
